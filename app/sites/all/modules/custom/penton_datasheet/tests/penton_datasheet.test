<?php
/**
 * @file
 * Provides automated tests for the penton_datasheet module.
 */

/**
 * Class PentonDatasheetTestCase
 *
 * Tests the ability to create content from csv files.
 */
class PentonDatasheetTestCase extends DrupalWebTestCase {

  protected $profile = 'testing';

  /**
   * Register the test case to the Drupal Testing suite.
   */
  public static function getInfo() {
    return array(
      'name' => "Penton datasheet",
      'description' => "Test data tables",
      'group' => 'TT',
    );
  }

  /**
   * Set up prerequisites to run tests.
   */
  public function setUp() {
    parent::setUp(
      array(
        // Must-have modules.
        'node',
        'field',
        'filter',
        'text',
        'block',
        'comment',
        'image',
        'list',
        'menu',
        'number',
        'options',
        'path',
        'taxonomy',
        'file',
        'system',
        'user',
        'date',
        'date_api',
        'entity',
        'entityreference',
        'variable',
        // Contrib must-use modules.
        'features',
        'pathauto',
        'view_unpublished',
        'context',
        'uuid',
        // Basic Features.
        'penton_field_bases',
        'penton_categories',
        'penton_program',
        'penton_page',
        'penton_page_type',
        'penton_article',
        'penton_article_type',
        'penton_media_entity',
        'penton_user_info',
        'penton_image_styles',
        'penton_blocks',
        'penton_permissions',
        'penton_program',
        'penton_date_formats',
        'penton_subtheme',
        // Custom modules.
        'penton_core',
        'penton_taxonomy',
        'penton_user',
        'penton_user_register',
        'penton_user_permissions',
        'penton_author',
        'penton_author_articles',
        // Features required for testing.
        'penton_data_tables',
        'penton_data_table_detail',
        // Modules required for testing.
        'book',
        'penton_datasheet',
      )
    );
    features_revert();

    // Post-configuration. Adding content, terms, etc.
    module_enable([
      'penton_taxonomy_generate',
      'penton_content_preview',
      // 'penton_content_manager'
    ]);

    cache_clear_all();
    node_access_rebuild();

    // Work around PDO Exception Integrity constraint violation:
    // 1062 Duplicate entry X for key PRIMARY.
    user_role_delete('author');
    user_role_delete('comment moderator');

    // Create Admin user.
    $user = $this->drupalCreateUser([
      'administer nodes',
      'bypass node access',
      'administer content types',
      'view the administration theme'
    ]);
    $this->drupalLogin($user);

    // Theme settings.
    theme_enable(['penton_core_theme']);
    variable_set('theme_default', 'penton_core_theme');
    variable_set('admin_theme', 'bartik');
    variable_set('node_admin_theme', '1');
  }

  /**
   * Main test file.
   */
  public function testDatasheetGeneration() {

    // TEST 1: plain csv.

    // Create datasheet and data table nodes.
    $edit = array();
    $edit['title'] = 'Plain datasheet';
    $edit['field_penton_media_type[und]'] = 'datasheet';
    $edit['files[field_penton_media_content_und_0]'] = drupal_realpath(drupal_get_path('module', 'penton_datasheet') . '/tests/assets/plain.csv');
    $edit['field_penton_main_page_columns[und][0][value]'] = '1, 2, 3';
    $edit['field_penton_detail_page_columns[und][0][value]'] = '2, 3, 4';
    $this->drupalPost('node/add/media-entity', $edit, t('Save'));
    $this->assertText(t('Media Entity @title has been created.', array('@title' => $edit['title'])));
    $this->assertRaw('/plain.csv" type="text/csv; length=800">plain.csv</a>', 'CSV file is attached to media entity');
    $datasheet_node = $this->drupalGetNodeByTitle($edit['title']);
    $edit = array();
    $edit['title'] = 'Data table - plain datasheet';
    $edit["body[und][0][value]"] = $this->randomString(20);
    $edit['field_penton_link_media_entity[und]'] = $datasheet_node->title . '(' . $datasheet_node->nid . ')';
    $edit['field_penton_article_type[und]'] = 'Data Table';
    $this->drupalPost('node/add/article', $edit, t('Save'));
    $this->assertText(t('Article @title has been created.', array('@title' => $edit['title'])));

    // Advance to full table view.
    $this->clickLink('View the full list');
    $this->assertRaw('<table class="tablesorter sticky-enabled" id="datatable">', 'Data table is present on full page');
    // TODO: make sure only selected columns are visible.

    // Advance to detail page.
    $detail_node = $this->drupalGetNodeByTitle('Title 1');
    $this->clickLink($detail_node->title);
    $this->assertRaw('<h1 class="data-table-head__head">' . $detail_node->title . '</h1>', 'H1 is present on detail page');
    // TODO: check excluded columns are not present.
    // TODO: check pager.


    // TEST 2: "tagged" csv.

    // Create nodes
    $edit = array();
    $edit['title'] = 'Tagged datasheet';
    $edit['field_penton_media_type[und]'] = 'datasheet';
    $edit['files[field_penton_media_content_und_0]'] = drupal_realpath(drupal_get_path('module', 'penton_datasheet') . '/tests/assets/tagged.csv'); // CSV with tokens, 12 columns
    $edit['field_penton_main_page_columns[und][0][value]'] = '3,4,5,6,7,8,9,10,11,12'; // exclude Simplecol, [Logo]
    $edit['field_penton_detail_page_columns[und][0][value]'] = '8'; // exclude [Item3]
    $this->drupalPost('node/add/media-entity', $edit, t('Save'));
    $this->assertText(t('Media Entity @title has been created.', array('@title' => $edit['title'])));
    $this->assertRaw('/plain.csv" type="text/csv; length=800">plain.csv</a>', 'CSV file is attached to media entity');
    $datasheet_node = $this->drupalGetNodeByTitle($edit['title']);
    $edit = array();
    $edit['title'] = 'Data table - tagged datasheet';
    $edit["body[und][0][value]"] = $this->randomString(20);
    $edit['field_penton_link_media_entity[und]'] = $datasheet_node->title . '(' . $datasheet_node->nid . ')';
    $edit['field_penton_article_type[und]'] = 'Data Table';
    $this->drupalPost('node/add/article', $edit, t('Save'));
    $this->assertText(t('Article @title has been created.', array('@title' => $edit['title'])));

    // Advance to full table view.
    $this->clickLink('View the full list');
    $this->assertRaw('<table class="tablesorter sticky-enabled" id="datatable">', 'Data table is present on full page');
    //$this->xpath();

    // Advance to detail page.
    $detail_node = $this->drupalGetNodeByTitle('Title 1');
    $this->clickLink($detail_node->title);
    $this->assertRaw('<h1 class="data-table-head__head">' . $detail_node->title . '</h1>', 'H1 is present on detail page');

    // Full view page.
    // TODO: no [tags] are present.
    // Detail page.
    // TODO: no [tags] are present.
    // TODO: all items on proper positions.


    print_r("\n* * * * * *\n* * *TEST RUN ID: " . $GLOBALS['drupal_test_info']['test_run_id'] . "\n* * * * * *\n");
    // exit;
    // su: placeholder-for-uid-1 / 123
    // ($S$Do9ZGPnBwghX7QPHLjdBkd.sl9FU.CnxNcjsw.WY7llM1ZSzAJVY)
    // file_put_contents('./sites/default/files/simpletest/verbose/tmp1.html' , $this->drupalGetContent());

  }
}
