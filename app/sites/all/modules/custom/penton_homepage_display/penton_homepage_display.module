<?php
/**
 * @file
 * Code for the Penton homepage functions.
 */

define('PENTON_HOMEPAGE_DISPLAY_DATA_CID_PREFIX', 'penton_display_admin_cid');

/**
 * Implements hook_node_insert().
 */
function penton_homepage_display_node_insert($node) {
  if ($node->type == 'display_admin') {
    _penton_homepage_display_sethome($node);
  }
  _penton_homepage_clear_cache();
}

/**
 * Implements hook_node_update().
 */
function penton_homepage_display_node_update($node) {
  if ($node->type == 'display_admin') {
    _penton_homepage_display_sethome($node);
  }
  _penton_homepage_clear_cache();
}

/**
 * Implements hook_node_delete().
 */
function penton_homepage_display_node_delete($node) {
  if ($node->type == 'display_admin') {
    _penton_homepage_display_set_to_last($node);
  }
  _penton_homepage_clear_cache();
}

/**
 * Implements hook_node_access().
 *
 * Forbid access to any display admin except the one currently being homepage.
 */
function penton_homepage_display_node_access($node, $op, $account) {
  $status = NODE_ACCESS_IGNORE;
  if (is_object($node) && $node->type === 'display_admin' && !user_access('administer content') && $op === 'view') {
    $current_display_admin = _penton_get_homepage_display();
    if (is_object($current_display_admin) && $current_display_admin->nid !== $node->nid) {
      $status = NODE_ACCESS_DENY;
    }
  }
  return $status;
}

/**
 * Simply set the front page variable to the node.
 *
 * @author James Linnell james.linnell@ixxus.com
 *
 * @param object $node
 *   The node.
 */
function _penton_homepage_display_sethome($node) {
  if ($node->status == 1) {
    // The node is published, that's good. We can set it as homepage.
    // As it's being inserted that means it's the latest.
    variable_set('site_frontpage', 'node/' . $node->nid);
  }
  else {
    // If the node is new it doesn't matter but if it already exists we need to
    // check that it is not actually set to be the homepage.
    if ($node->created !== $node->changed) {
      // Then it's being updated, so we will need to make sure it's not the
      // homepage.
      _penton_homepage_display_set_to_last($node);
    }
  }
}

/**
 * Set the homepage back to the last saved or default.
 *
 * @author James Linnell james.linnell@ixxus.com
 *
 * @param object $node
 *   The node.
 */
function _penton_homepage_display_set_to_last($node) {
  $current = variable_get('site_frontpage');
  if ($current == 'node/' . $node->nid) {
    // If it is then we need to roll back somehow.
    // Get the next latest (updated) published node.
    if (!empty($next = _penton_node_get_recent($node->nid, 1))) {
      // Then we can set the homepage to the first in the list.
      variable_set('site_frontpage', 'node/' . $next[0]);
    }
    else {
      // Just set it back to the default.
      variable_set('site_frontpage', 'node');
    }
  }
}

/**
 * Return the last modified display_admin node.
 *
 * @author James Linnell james.linnell@ixxus.com
 *
 * @param int $nid
 *   The nid to ignore.
 * @param int $number
 *   How many record to return.
 *
 * @return array
 *   Return an array of nodes or an empty error if there are none.
 */
function _penton_node_get_recent($nid, $number = 1) {
  $query = db_select('node', 'n');
  $query->condition(db_and()
    ->condition('n.status', 1)
    ->condition('n.type', 'display_admin')
    ->condition('n.nid', $nid, '!=')
  );
  $nids = $query
    ->fields('n', array('nid'))
    ->orderBy('n.changed', 'DESC')
    ->range(0, $number)
    ->execute()
    ->fetchCol();

  return $nids ? $nids : array();
}

/**
 * Clear any associated content from the cache.
 *
 * @author James Linnell james.linnell@ixxus.com
 */
function _penton_homepage_clear_cache() {
  cache_clear_all(PENTON_HOMEPAGE_DISPLAY_DATA_CID_PREFIX, 'cache_block', TRUE);
}


/**
 * Prepare Display admin associated data.
 *
 * @return mixed|array
 *   Data configured by display_admin fields.
 */
function penton_homepage_display_get_full_data() {

  static $result = array();
  if (!empty($result)) {
    return $result;
  }

  $da = _penton_blocks_get_config_node();
  if (empty($da)) {
    return array();
  }

  $cached = cache_get(PENTON_HOMEPAGE_DISPLAY_DATA_CID_PREFIX . $da->getIdentifier(),
    'cache_block');
  if (!empty($cached->data)) {
    return $cached->data;
  }

  // 0. Promos.

  // Top Stories 4th article.
  $pillar_promo1 = $da->field_penton_pillar_promo_unit_1->value();

  // Left sidebar unit.
  $pillar_promo2 = $da->field_penton_pillar_promo_unit_2->value();

  // Usermarketing promo in top right rail.
  $usermarketing_promo = $da->field_penton_user_marketing_pro->value();

  // First of all exclude all pinned nodes.
  $pinned_featured_media = (!empty($da->field_penton_featured_media_node->value()) ? array($da->field_penton_featured_media_node->value()) : array());
  _penton_homepage_display_excluded_nodes($pinned_featured_media);
  $pinned_sidebar_featured_nodes = $da->field_penton_featured_nodes->value();
  _penton_homepage_display_excluded_nodes($pinned_sidebar_featured_nodes);

  // 1. Top stories.
  $top_stories_nodes = _penton_homepage_display_excluded_nodes($da->field_penton_top_stories_nodes->value());

  // 2. Featured Categories and it's stories.
  $featured_categories = $da->field_penton_categories->value();
  foreach ($featured_categories as $i => $category) {
    $category->articles = _penton_homepage_display_excluded_nodes(_penton_homepage_display_fill_da_articles_gap(array(), ($i == 2 ? 5 : 3), FALSE, 'first', $category));
  }

  // 3. Featured Program and it's story.
  $featured_program = $da->field_penton_program->value();
  if (!empty($featured_program->name)) {
    $featured_program->article = _penton_homepage_display_excluded_nodes(_penton_homepage_display_fill_da_articles_gap(array(), 1, FALSE, 'all', $featured_program));
  }

  // 4. Featured Media.
  $featured_media_node = _penton_homepage_display_excluded_nodes(_penton_homepage_display_fill_da_articles_gap($pinned_featured_media, 1, array('video', 'gallery'), 'all'));

  // 5. Recent + "featured" nodes.
  $sidebar_recent_nodes = _penton_homepage_display_excluded_nodes(_penton_homepage_display_fill_da_articles_gap(array(), 5, FALSE, 'none'));
  $sidebar_featured_nodes = _penton_homepage_display_excluded_nodes(_penton_homepage_display_fill_da_articles_gap($pinned_sidebar_featured_nodes, 4, FALSE, 'none'));

  $result = array(
    'pillar_promo1' => $pillar_promo1,
    'pillar_promo2' => $pillar_promo2,
    'usermarketing_promo' => $usermarketing_promo,
    'top_stories' => $top_stories_nodes,
    'featured_categories' => $featured_categories,
    'featured_program' => $featured_program,
    'featured_media_node' => $featured_media_node,
    'sidebar_featured_nodes' => $sidebar_featured_nodes,
    'sidebar_recent_nodes' => $sidebar_recent_nodes,
  );

  cache_set(PENTON_HOMEPAGE_DISPLAY_DATA_CID_PREFIX . $da->getIdentifier(),
    $result, 'cache_block', CACHE_TEMPORARY);

  return $result;
}

/**
 * Function to collect nodes.
 *
 * @param mixed $op
 *   array or single node to add to a static array.
 *
 * @return mixed
 *   pass input as is.
 */
function _penton_homepage_display_excluded_nodes($op = 'get') {
  static $excluded = array();

  if ($op == 'get') {
    return $excluded;
  }
  if (!empty($op) && is_array($op)) {
    foreach ($op as $n) {
      if (!empty($n)) {
        $excluded[] = $n;
      }
    }
    if (is_object($op)) {
      $excluded[] = $op;
    }
  }
  return $op;
}

/**
 * Fill gaps in pinned elements by parameters.
 *
 * @param array $pinned
 *   pinned elements.
 * @param int $limit
 *   limit to fill.
 * @param array|mixed $subtypes
 *   array of subtypes to fill.
 * @param string $featured_image
 *   flag to fill featured items.
 * @param array|mixed $term
 *   term to search if needed.
 *
 * @return array|mixed
 *   filled array of nodes.
 */
function _penton_homepage_display_fill_da_articles_gap($pinned, $limit, $subtypes = FALSE, $featured_image = 'all', $term = FALSE) {
  $pinned = !empty($pinned) ? $pinned : array();
  $filled = array();

  $query_limit = $limit - count($pinned);

  if ($query_limit > 0) {
    $excluded = _penton_homepage_display_excluded_nodes('get');
    $excluded_nids = array();
    foreach ($excluded as $n) {
      $excluded_nids[] = $n->nid;
    }
    foreach ($pinned as $n) {
      if (!empty($n->nid)) {
        $excluded_nids[] = $n->nid;
      }
    }

    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'article')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->propertyCondition('promote', NODE_PROMOTED)
      ->fieldOrderBy('field_penton_published_datetime', 'value', 'DESC')
      ->propertyOrderBy('changed', 'DESC');

    if (count($excluded_nids) > 0) {
      $query = $query->propertyCondition('nid', $excluded_nids, 'NOT IN');
    }

    $article_subtypes = !empty($subtypes) && is_array($subtypes) ? $subtypes : array(
      'article',
      'audio',
      'gallery',
      'data table',
      'link',
      'video',
      'webinar',
      'white paper',
    );
    $vocabulary = taxonomy_vocabulary_machine_name_load('article_type');
    $all_types = taxonomy_get_tree($vocabulary->vid);
    $article_subtypes_tids = array();
    foreach ($all_types as $t) {
      if (in_array(strtolower($t->name), $article_subtypes)) {
        $article_subtypes_tids[] = $t->tid;
      }
    }
    if (!empty($article_subtypes_tids)) {
      $query = $query->fieldCondition('field_penton_article_type', 'tid', $article_subtypes_tids, 'IN');
    }
    if ($term && !empty($term->tid)) {
      if ($term->vocabulary_machine_name == 'program') {
        $query = $query->fieldCondition('field_penton_program', 'tid', $term->tid, '=');
      }
      else {
        $query = $query->addTag('penton_category_or_subcategory');
        $query = $query->addMetaData('penton_category_or_subcategory_term', $term->tid);
      }
    }

    switch ($featured_image) {
      case 'all':
        $query = $query->fieldCondition('field_penton_link_media_feat_img', 'target_id', NULL, 'IS NOT NULL');
        $query = $query->range(0, $query_limit);
        $query_result = $query->execute();
        break;

      case 'first':
        if ($query_limit == $limit) {
          $f_query = clone $query;
          $f_query = $f_query->fieldCondition('field_penton_link_media_feat_img', 'target_id', NULL, 'IS NOT NULL');
          $f_query = $f_query->range(0, 1);
          $first_result = $f_query->execute();
          if (!empty($first_result['node'])) {
            $query = $query->propertyCondition('nid', array_keys($first_result['node']), 'NOT IN');
            $query = $query->range(0, $query_limit - 1);
          }
          else {
            $query = $query->range(0, $query_limit);
          }
          $least_result = array();
          if (!empty($first_result['node'])) {
            $least_result = $query->execute();
          }
          $query_result = array(
            'node' => array_merge(
              !empty($first_result['node']) ? $first_result['node'] : array(),
              !empty($least_result['node']) ? $least_result['node'] : array()
            ),
          );
        }
        else {
          $query = $query->range(0, $query_limit);
          $query_result = $query->execute();
        }
        break;

      default:
        $query = $query->range(0, $query_limit);
        $query_result = $query->execute();
    }
    if (!empty($query_result['node'])) {
      foreach ($query_result['node'] as $n) {
        $filled[] = node_load($n->nid);
      }
    }
  }

  return array_merge(!empty($pinned) ? $pinned : array(),
    !empty($filled) ? $filled : array());
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Adds OR condition for primary and secondary categories.
 */
function penton_homepage_display_query_penton_category_or_subcategory_alter(QueryAlterableInterface $query) {
  $term = $query->getMetaData('penton_category_or_subcategory_term');
  $children = taxonomy_get_children($term);
  $terms = array_merge(array($term), array_keys($children));
  if ($term) {
    $query->leftJoin('field_data_field_penton_primary_category', 'fdp', 'node.nid = fdp.entity_id');
    $query->leftJoin('field_data_field_penton_secondary_category', 'fds', 'node.nid = fds.entity_id');
    $or = db_or()
      ->condition('fdp.field_penton_primary_category_tid', $terms, 'IN')
      ->condition('fds.field_penton_secondary_category_tid', $terms, 'IN');
    $query->condition($or);
  }
}

/**
 * Function for getting configuration node for homepage (display_admin CT).
 *
 * @return EntityMetadataWrapper|bool
 *   Returning node EFQ result object if node exists
 *   or FALSE if not.
 */
function _penton_blocks_get_config_node() {
  $node = menu_get_object();
  if (empty($node->type) || (!empty($node->type) && $node->type != 'display_admin')) {
    $node = _penton_get_homepage_display();
  }
  return (!empty($node) && !empty($node->type) && $node->type == 'display_admin') ? entity_metadata_wrapper('node', $node->nid) : FALSE;
}

/**
 * Get Display Admin node currently being the front page.
 *
 * @return object|bool
 *   display_admin node
 */
function _penton_get_homepage_display() {
  $node = FALSE;
  $front_alias = variable_get('site_frontpage');
  $front_path = drupal_lookup_path("source", $front_alias) ?: $front_alias;
  $nid = arg(1, $front_path);
  if (is_numeric($nid)) {
    $node = node_load($nid);
  }
  return $node;
}
