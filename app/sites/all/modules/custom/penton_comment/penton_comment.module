<?php
/**
 * @file
 * Penton comment module.
 */

/**
 * Define role id for role comment moderator.
 */
define('PENTON_COMMENT_MODERATOR_RID', 5);

/**
 * Implements hook_permission().
 */
function penton_comment_permission() {
  return array(
    'penton post comments' => array(
      'title' => t('Post comments'),
      'description' => t('Combined with core comment module permissions with AND mask.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function penton_comment_menu() {
  $items['comments/%node'] = array(
    'page callback' => 'penton_comment_callback',
    'page arguments' => array(1),
    'access arguments' => array('access comments'),
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  );

  $items['ajax/get-comments-count/%node'] = array(
    'page callback' => 'penton_comment_get_comment_count',
    'page arguments' => array(2),
    'access arguments' => array('access comments'),
    'type' => MENU_CALLBACK,
  );

  $items['ajax/get-comments/%node'] = array(
    'page callback' => 'penton_comment_get_comments',
    'page arguments' => array(2),
    'access arguments' => array('access comments'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Ajax function for receiving comments count.
 */
function penton_comment_get_comment_count($node = NULL) {
  if (is_ajax()) {
    if (!empty($node) && isset($node->nid)) {
      $query = db_select('node_comment_statistics', 'n')
        ->condition('n.nid', $node->nid)
        ->fields('n', array('comment_count'))
        ->execute()
        ->fetch();
      $comment_count = empty($query) ? 0 : $query->comment_count;
      return drupal_json_output($comment_count);
    }
    return drupal_json_output(-1);
  }
  return drupal_not_found();
}

/**
 * Ajax function for receiving comments.
 */
function penton_comment_get_comments($node = NULL) {
  if (is_ajax()) {
    if (!empty($node)) {
      return drupal_json_output(render(comment_node_page_additions($node)));
    }
    return drupal_json_output(NULL);
  }
  return drupal_not_found();
}

/**
 * Implements hook_theme().
 */
function penton_comment_theme($existing, $type, $theme, $path) {
  return array(
    'more_comments' => array(
      'render element' => 'more',
    ),
  );
}

/**
 * Implements hook_custom_theme().
 */
function penton_comment_custom_theme() {
  // Edit comment in a default admin theme.
  if (arg(0) == 'comment'
    && arg(2) == 'edit'
    && user_has_role(PENTON_COMMENT_MODERATOR_RID)
    && $theme = variable_get('admin_theme')) {
    return $theme;
  }
}

/**
 * Theme function for more comments button.
 *
 * @param array $variables
 *   Theme variables.
 *
 * @return string
 *   Output HTML.
 */
function theme_more_comments($variables) {
  global $pager_total;
  $element = 0;
  $page = pager_find_page($element);
  if ($page + 1 < $pager_total[$element]) {
    return '<div id="show-more-comments-' . $variables['more']['#node']->nid
      . '" class="show-more-comments" data-url="'
      . url('comments/' . $variables['more']['#node']->nid, array('query' => array('page' => $page + 1))) . '"><a>'
      . t('Load more comments') . '</a></div>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function penton_comment_form_comment_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  $form['#access'] = !user_has_role(PENTON_CONTENT_PREVIEW_RID);
  $form['subject']['#access'] = FALSE;
  if (isset($form['author']['_author'])) {
    $form['author']['_author']['#access'] = FALSE;
  }
  if (isset($form['author']['name'])) {
    $form['author']['name']['#access'] = FALSE;
  }
  $form['author']['mail']['#access'] = FALSE;
  $form['author']['homepage']['#access'] = FALSE;
  $form['author']['date']['#access'] = FALSE;
  $form['author']['status']['#access'] = FALSE;
  // Allowing changes by js.
  $form['pid']['#type'] = 'hidden';
  $form['pid']['#default_value'] = $form['pid']['#value'];
  unset($form['pid']['#value']);
  $form['cid']['#type'] = 'hidden';
  $form['cid']['#default_value'] = $form['cid']['#value'];
  unset($form['cid']['#value']);

  $form['comment_body']['#after_build'][] = '_configure_comment_form';
  $form['comment_body']['#prefix'] = '<div class="user-comment-body">';
  $form['comment_body']['#suffix'] = '</div>';
  $form['comment_body']['#attributes']['class'][] = 'user-comment-field';
  $form['comment_body'][LANGUAGE_NONE]['#prefix'] = '<div class="user-photo">'
    . penton_comment_get_user_picture($user)
    . '</div><div class="user-content">';
  if (!empty($user->uid)) {
    $form['comment_body'][LANGUAGE_NONE]['#prefix'] .= '<div class="user-name">'
      . l($user->name, 'user/' . $user->uid)
      . '</div>';
  }
  $form['comment_body'][LANGUAGE_NONE]['#prefix'] .= '<div class="user-comment">';
  $form['comment_body'][LANGUAGE_NONE]['#suffix'] = '</div></div>';
  $form['comment_body'][LANGUAGE_NONE]['#title_display'] = 'invisible';
  $form['comment_body'][LANGUAGE_NONE][0]['#title_display'] = 'invisible';
  $form['comment_body'][LANGUAGE_NONE][0]['#attributes']['placeholder']
    = $form['#node']->comment_count ?
      t('Join the discussion...') :
      t('Be the first to comment...');
  $form['comment_body'][LANGUAGE_NONE][0]['#attributes']['id'] = "edit-comment-body-" . $form['#node']->nid;
  $form['comment_body'][LANGUAGE_NONE][0]['#suffix'] = '<a href="#" class="element-invisible publish js-publish user-comment__publishbtn">Publish</a>';
  if (empty($user->uid)) {
    $welcome_link = l(t('Log in or register to comment'), '/penton_modal/nojs/login', array(
        'attributes' => array(
          'class' => 'ctools-use-modal ctools-modal-modal-popup-login',
          'rel' => 'nofollow',
        ),
      )
    );
    $form['comment_body'][LANGUAGE_NONE][0]['#suffix'] .= "<span class='comment-error'>$welcome_link</span>";
  }
  elseif (module_exists('penton_user_permissions') && !penton_user_permissions_is_verified()) {
    $verify_link = l(t('Verify your account to comment'), 'penton_modal/ajax/validation/prompt/comment', array(
      'attributes' => array(
        'class' => array('ctools-use-modal', 'ctools-modal-modal-popup-validation-prompt'),
        'rel' => 'nofollow',
      ),
    ));
    $form['comment_body'][LANGUAGE_NONE][0]['#suffix'] .= "<span class='comment-error'>$verify_link</span>";
  }
  global $theme;
  if ($theme == variable_get('admin_theme')) {
    $form['comment_body'][LANGUAGE_NONE][0]['#attributes']['class'][] = 'ckeditor';
  }
  else {
    $form['actions']['#prefix'] = '<div class="element-invisible">';
    $form['actions']['#suffix'] = '</div>';
    $form['actions']['submit']['#ajax'] = array(
      'callback' => 'penton_comment_comment_add',
    );
    $form['comment_body']['#after_build'][] = 'penton_comment_change_text_format';
    $form['actions']['submit']['#attributes'] = array('id' => 'edit-submit-' . $form['#node']->nid);
    $form['actions']['submit']['#process'][] = '_configure_comment_ids';
    $form['actions']['submit']['#process'][] = 'ajax_process_form';
  }
  $form['actions']['preview']['#access'] = FALSE;
  $form['#submit'][] = '_comment_form_submit_changes';
  $form['#validate'][] = '_comment_form_validate_permissions';
}

/**
 * It's callback for change text format for comment form.
 */
function penton_comment_change_text_format(&$form) {
  $form[LANGUAGE_NONE][0]['format']['format']['#value'] = $form[LANGUAGE_NONE][0]['format']['format']['#default_value'] = 'comments';

  return $form;
}

/**
 * Removes block with format tips.
 *
 * @param array $form_element
 *   Form element.
 *
 * @return array
 *   Form element
 */
function _configure_comment_form($form_element) {
  $form_element['und'][0]['format']['#attributes']['class'][] = 'element-invisible';
  $form_element['#id'] = 'comment_body';
  return $form_element;
}

/**
 * Implements hook_element_info_alter().
 */
function penton_comment_element_info_alter(&$type) {
  array_unshift($type['text_format']['#pre_render'], '_configure_comment_ids');
}

/**
 * Comment body ID chaning.
 *
 * @param array $element
 *   Text format element.
 *
 * @return mixed
 *   Changed array.
 */
function _configure_comment_ids($element) {
  if (!empty($element['value']) && !empty($element['value']['#attributes']['id'])) {
    $element['value']['#id'] = $element['value']['#attributes']['id'];
  }
  if (!empty($element['#id']) && !empty($element['#attributes']['id'])) {
    $element['#id'] = $element['#attributes']['id'];
  }
  return $element;
}

/**
 * Custom comment validation to control permissions.
 *
 * @param array $form
 *   Form.
 * @param array $form_state
 *   Form state.
 */
function _comment_form_validate_permissions($form, $form_state) {
  if (!user_is_logged_in() || !user_access('post comments') || !user_access('penton post comments') ||
    (!user_access('administer comments') && $form['#node']->comment != COMMENT_NODE_OPEN)) {
    watchdog('content', 'Comment: unauthorized comment submitted or comment submitted to a closed post.', array(), WATCHDOG_WARNING);
    form_set_error('', t('Comment: unauthorized comment submitted or comment submitted to a closed post'));
  }
}

/**
 * Custom comment submit function to clear comment form data.
 *
 * @param array $form
 *   Form.
 * @param array $form_state
 *   Form state.
 */
function _comment_form_submit_changes($form, &$form_state) {
  $form_state['redirect'] = FALSE;
  $_POST = array();
}

/**
 * AJAX comment submission handler.
 *
 * Returns commands to refreshing comments and showing errors.
 *
 * @param array $form
 *   Form.
 * @param array $form_state
 *   Form state.
 *
 * @return array
 *   Ajax commands
 */
function penton_comment_comment_add($form, &$form_state) {
  if (empty($form_state['redirect'])) {
    $messages = drupal_get_messages();
    $node = node_load($form_state['values']['nid']);
    $commands[] = ajax_command_replace('#comments-' . $node->nid, render(comment_node_page_additions($node)));
    // Emulate ajax comment load.
    $commands[] = ajax_command_invoke('#comments-' . $node->nid . ' .comments a.comments--show', 'trigger', array('forceLoadedState'));
    $commands[] = ajax_command_invoke('#comments-' . $node->nid . ' .comments a.comments--show', 'trigger', array('click'));
    $arguments = array(
      array(
        'dtm_user_id' => $node->uid,
        'dtm_comment_id' => $node->cid,
        'dtm_event' => 'comment',
      ),
    );
    if (!empty($messages['error'])) {
      foreach ($messages['error'] as $text) {
        $commands[] = ajax_command_after('#comments-' . $node->nid . ' textarea[name="comment_body[und][0][value]"]', '<span class=\'comment-error\'>' . $text . '</span>');
      }
    }
    else {
      $commands[] = ajax_command_invoke(NULL, 'dtm_direct_call_comment_add', $arguments);
    }
  }
  else {
    $commands[] = ctools_ajax_command_redirect($form_state['redirect']);
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Penton_comment_prepare_comment_tree.
 *
 * Loads comments to specified node.
 * Prepares them to output and
 * makes html-string with a list of comments.
 *
 * @param array $node
 *   Node the comment is related to.
 *
 * @return string
 *   Comment tree.
 */
function penton_comment_prepare_comment_tree($node) {
  $comments_array = comment_load_multiple(comment_get_thread($node, '', 100));
  foreach ($comments_array as $comment_raw) {
    $comments_raw[] = comment_view($comment_raw, $node);
    $comment_raw->depth = count(explode('.', $comment_raw->thread)) - 1;
  }
  penton_comment_build_comment_tree($comments_raw);
  penton_comment_set_comment_info($comments_raw);
  $comments_rendered = '<div class="comments-inner-container">' . drupal_render($comments_raw) . '</div>';
  return $comments_rendered;
}

/**
 * Implements hook_preprocess_comment().
 */
function penton_comment_preprocess_comment(&$variables) {
  unset($variables['content']['links']['comment']['#links']);
  $variables['created'] = penton_comment_calculate_date($variables);
  $pid = $variables['elements']['#comment']->pid;
  $variables['parent_comment']['replies'] = property_exists($variables['elements']['#comment'], 'replies') ? $variables['elements']['#comment']->replies : NULL;
  if ($pid != 0) {
    $parent_comment_uid = $variables['elements']['#comment']->parent_uid;
    $variables['parent_comment']['username'] = user_load($parent_comment_uid)->name;
    $variables['parent_comment']['user_link'] = url('user/' . $parent_comment_uid);
  }
  if ($variables['comment']->uid) {
    $comment_author = user_load($variables['comment']->uid);
    $variables['user_name'] = $comment_author->name;
    $variables['user_link'] = 'user/' . $variables['comment']->uid;
    $variables['user_img'] = penton_comment_get_user_picture($comment_author);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function penton_comment_preprocess_username(&$variables) {
  $name = $variables['name_raw'] = format_username($variables['account']);
  $variables['name'] = check_plain($name);
}

/**
 * Penton_comment_get_user_picture.
 *
 * Returns an html-string with clickable user picture.
 *
 * @param object $user
 *   User array.
 *
 * @return string
 *   Link with user image.
 *
 * @throws Exception
 *   Exception.
 */
function penton_comment_get_user_picture($user) {

  // In case user comes from user_load().
  if (!empty($user->picture) && is_object($user->picture)) {
    $file = $user->picture;
  }
  // In case user comes from global variables.
  if (empty($file) && !empty($user->picture)) {
    $file = file_load($user->picture);
  }

  // Get user profile image.
  if (!empty($file)) {
    $file_path = $file->uri;
    $user->profile_image = theme_retina_image(array(
        'attributes' => array('class' => 'user-thumb-img'),
        'path' => $file_path,
        'style_name' => 'non_feat_user_comment_standard',
      )
    );
  }
  else {
    $file_path = !empty(variable_get('user_picture_default', '')) ?
      variable_get('user_picture_default') :
      drupal_get_path('theme', 'penton_core_theme') . '/images/account-default-image.png';
    if (!empty($file_path)) {
      $user->profile_image = theme('image', array(
        'path' => $file_path,
        'attributes' => array(
          'class' => 'user-thumb-img',
        ),
      ));
    }
    else {
      $default_profile_image_path = drupal_get_path('theme', 'penton_core_theme') . '/images/account-default-image.png';
      $file_path = !empty(variable_get('user_picture_default', '')) ? variable_get('user_picture_default') : $default_profile_image_path;
      if (!empty($file_path)) {
        $user->profile_image = theme('image', array(
          'path' => $file_path,
          'attributes' => array(
            'class' => 'header-user-img',
          ),
        ));
      }
    }
  }

  $user_link = 'user/' . $user->uid;

  $user_img_link = $user->uid != 0 ?
    l($user->profile_image, $user_link, array('html' => TRUE)) :
    $user->profile_image;

  return $user_img_link;
}

/**
 * Implements hook_comment_view_alter().
 */
function penton_comment_comment_view_alter(&$build) {
  $build['#prefix'] = '';
  $build['#suffix'] = '';
}

/**
 * Implements hook_preprocess_comment_wrapper().
 */
function penton_comment_preprocess_comment_wrapper(&$variables) {
  $variables['content']['show_comments'] = l(
    format_plural($variables['node']->comment_count, '1 comment', '@count comments'),
    'javascript:void(0)',
    array(
      'attributes' => array(
        'class' => array('comments--show', 'hidden'),
      ),
      'fragment' => '',
      'external' => TRUE,
    )
  );
  $variables['content']['comments'] = penton_comment_load_childs($variables['content']['#node'], $variables['content']['comments']);
  penton_comment_build_comment_tree($variables['content']['comments']);
  penton_comment_set_comment_info($variables['content']['comments']);
  $variables['content']['comments']['more'] = array('#theme' => 'more_comments', '#node' => $variables['content']['#node']);
}

/**
 * AJAX callback for more comments.
 *
 * @param object $node
 *   Node object.
 *
 * @return array
 *   AJAX commands array
 */
function penton_comment_callback($node) {
  $commands = array();
  $mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);
  $comments_per_page = variable_get('comment_default_per_page_' . $node->type, 50);
  if ($cids = comment_get_thread($node, $mode, $comments_per_page)) {
    $comments = comment_load_multiple($cids);
    comment_prepare_thread($comments);
    $comments = comment_view_multiple($comments, $node);
    $comments = penton_comment_load_childs($node, $comments);
    penton_comment_build_comment_tree($comments);
    penton_comment_set_comment_info($comments);
    $comments['more'] = array('#theme' => 'more_comments', '#node' => $node);
  }
  $commands[] = ajax_command_settings(array('contextId' => 'comments-' . $node->nid));
  $commands[] = ajax_command_replace('#show-more-comments-' . $node->nid, render($comments));
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Penton_comment_set_replies_counter.
 *
 * Modifies array with comments
 * so now it has a replies counter.
 * It shows how many replies to specific comment
 * are given.
 *
 * @param array $comments
 *   Comments array.
 */
function penton_comment_set_replies_counter(&$comments) {
  foreach ($comments as $key => $comment) {
    if (is_numeric($key)) {
      $pid = $comment['#comment']->cid;
      $replies_counter = 0;
      foreach ($comments as $key_child => $comment_child) {
        if (is_numeric($key_child)) {
          if ($comment_child['#comment']->pid == $pid) {
            $replies_counter++;
          }
        }
      }
      $comment['#comment']->replies = $replies_counter;
    }
  }
}

/**
 * Penton_comment_calculate_date.
 *
 * Returns a string with how much time has passed
 * since comment was posted.
 *
 * @param array $variables
 *   Variables array.
 *
 * @return bool|string
 *   Comment date.
 */
function penton_comment_calculate_date($variables) {
  $comment_created = intval($variables['elements']['#comment']->created);
  $current_time = time();
  $date_diff = $current_time - $comment_created;
  $days_pass = (int) ($date_diff / 86400);
  $sec_left = $date_diff % 86400;
  $hours_pass = (int) ($sec_left / 3600);
  $sec_left = $date_diff % 3600;
  $minutes_pass = (int) ($sec_left / 60);
  $format_time = '%d %s ago';
  if ($days_pass <= 7 && $days_pass >= 1) {
    $time_unit = ($days_pass > 1) ? 'days' : 'day';

    return sprintf($format_time, $days_pass, $time_unit);
  }
  elseif ($days_pass < 1 && $hours_pass >= 1) {
    $time_unit = ($hours_pass > 1) ? 'hours' : 'hour';

    return sprintf($format_time, $hours_pass, $time_unit);
  }
  elseif ($days_pass < 1 && $hours_pass < 1 && $minutes_pass >= 1) {
    $time_unit = ($minutes_pass > 1) ? 'minutes' : 'minute';

    return sprintf($format_time, $minutes_pass, $time_unit);
  }
  elseif ($days_pass < 1 && $hours_pass < 1 && $minutes_pass < 1) {

    return 'Just now';
  }
  else {

    return date("M j, Y", $comment_created);
  }
}

/**
 * Penton_comment_build_comment_tree.
 *
 * Modifies prefixes and suffixes parameters of comment objects
 * to build nested tree of comments.
 *
 * @param array $comments
 *   Comments.
 */
function penton_comment_build_comment_tree(&$comments) {
  $map = array_filter(array_keys($comments), 'is_numeric');
  $collapse_counter = 0;
  for ($index = 0; $index <= (count($map) - 1); $index++) {
    $current_comment = &$comments[$map[$index]];
    $current_depth = $current_comment['#comment']->depth;
    if (isset($map[$index + 1])) {
      $next_comment = &$comments[$map[$index + 1]];
      $next_depth = $next_comment['#comment']->depth;
    }
    else {
      $next_depth = 0;
    }
    if ($current_depth == 0) {
      $current_comment['#prefix'] .= '<div class="start-comment">';
    }
    else {
      $current_comment['#prefix'] = '<div class="reply-to-message">';
    }
    if ($current_depth == 0 || $current_depth == 1) {
      $collapse_counter++;
    }
    if ($next_depth <= $current_depth) {
      $depth_diff = $current_depth - $next_depth;
      $current_comment['#suffix'] = str_repeat('</div>', $depth_diff + 1);
    }
  }
}

/**
 * Penton_comment_set_comment_info.
 *
 * Modifies array with comments
 * so now it has a replies counter
 * and parent comment user id.
 *
 * @param array $comments
 *   Comments array.
 */
function penton_comment_set_comment_info(&$comments) {
  foreach ($comments as $key => $comment) {
    if (is_numeric($key)) {
      $cid = $comment['#comment']->cid;
      $pid = $comment['#comment']->pid;
      $comment['#comment']->replies = penton_comment_get_replies_counter($comments, $cid);
      $comment['#comment']->parent_uid = penton_comment_get_parent_uid($comments, $pid);
    }
  }
}

/**
 * Loads from DB all child elements for existed top level comments.
 *
 * @param array $comments
 *   Comments array.
 *
 * @return array
 *   Renderable array of comments.
 */
function penton_comment_load_childs($node, $comments) {
  $threads = array();
  foreach ($comments as $comment) {
    if (is_array($comment) && !empty($comment['#comment'])) {
      $threads[] = substr($comment['#comment']->thread, 0, 2);
    }
  }
  if (empty($threads)) {
    return $comments;
  }
  $mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);
  $query = db_select('comment', 'c');
  $query->addField('c', 'cid');
  $query
    ->condition('c.nid', $node->nid)
    ->addTag('penton_comment');

  if (!user_access('administer comments')) {
    $query->condition('c.status', COMMENT_PUBLISHED);
  }
  $query->where('SUBSTRING(c.thread, 1, 2) IN (:threads)', array(':threads' => $threads));
  if ($mode === COMMENT_MODE_FLAT) {
    $query->orderBy('c.created', 'DESC');
    $query->orderBy('c.cid', 'DESC');
  }
  else {
    $query->orderBy('c.thread', 'DESC');
  }
  $cids = $query->execute()->fetchCol();
  $comments = comment_load_multiple($cids);
  comment_prepare_thread($comments);
  return comment_view_multiple($comments, $node);
}

/**
 * Penton_comment_get_replies_counter.
 *
 * Returns a number with how many replies
 * to specific comment are given.
 *
 * @param array $comments
 *   Comments array.
 * @param int $cid
 *   Comment id.
 *
 * @return int
 *   Number of replies.
 */
function penton_comment_get_replies_counter($comments, $cid = 0) {
  $replies_counter = 0;
  foreach ($comments as $key => $comment) {
    if (is_numeric($key)) {
      if ($comment['#comment']->pid == $cid) {
        $replies_counter++;
      }
    }
  }
  return $replies_counter;
}

/**
 * Penton_comment_get_parent_uid.
 *
 * Returns a string with user id
 * of parent comment in thread.
 *
 * @param array $comments
 *   Comments array.
 * @param int $pid
 *   PID.
 *
 * @return mixed
 *   Comment UID.
 */
function penton_comment_get_parent_uid($comments, $pid = 0) {
  foreach ($comments as $key => $comment) {
    if (is_numeric($key)) {
      if ($comment['#comment']->cid == $pid) {
        return $comment['#comment']->uid;
      }
    }
  }
}


/**
 * Implements hook_query_TAG_alter().
 *
 * Alter comments query to select only top level comments and to order by DESC
 * as well as the default ASC.
 *
 * The default ASC ordering of threaded comments looks like this
 * where 1 is older than 2.
 *
 * 1
 * 1.1
 * 1.1.1
 * 1.2
 * 2
 * 2.1
 * 2.1.1
 * 2.1.2
 * 2.2
 *
 * DESC ordering of threaded comments (newest to oldest) should look like this.
 *
 * 2
 * 2.2
 * 2.1
 * 2.1.2
 * 2.1.1
 * 1
 * 1.2
 * 1.1
 * 1.1.1
 */
function penton_comment_query_comment_filter_alter(QueryAlterableInterface $query) {
  if (($node = $query->getMetaData('node')) && (get_class($query) == 'PagerDefault')) {
    // Get the configured default sort ordering for this node type.
    // The default ordering is ASC (older on top). If the configured sorting is
    // newer on top, change the ordering to DESC.
    $orderby = &$query->getOrderBy();
    $expressions = &$query->getExpressions();
    $query->condition('c.pid', 0);
    $count = $query->getCountQuery();
    $count->condition('c.pid', 0);
    $query->setCountQuery($count);
    // Sorting for threaded comments.
    if (isset($orderby['torder'])) {
      // Get rid of the expressions that prepare the threads for ASC ordering.
      unset($expressions['torder']);
      unset($orderby['torder']);
      // Simply order by the thread field.
      $orderby['c.thread'] = 'DESC';
    }
    // Sorting for flat comments.
    else {
      $direction = 'DESC';
      if (isset($orderby['c.cid'])) {
        unset($orderby['c.cid']);
      }
      $orderby['c.created'] = $direction;
      $orderby['c.cid'] = $direction;
    }
  }
}

/**
 * Implements hook_mail().
 */
function penton_comment_mail($key, &$message, $params) {
  switch ($key) {
    case 'comment_posted_notify':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_comment_insert().
 *
 * Sends email notification to author of commented node.
 */
function penton_comment_comment_insert($comment) {
  $node = node_load($comment->nid);
  $w_node = entity_metadata_wrapper('node', $node);

  if (isset($w_node->field_penton_author)) {
    foreach ($w_node->field_penton_author->value() as $author) {
      $lang = user_preferred_language($author);
      $w_author = entity_metadata_wrapper('user', $author);
      $emails[] = $w_author->mail->value();
      if (isset($w_author->field_penton_secondary_email) &&
        $w_author->field_penton_secondary_email->value()) {
        $emails[] = $w_author->field_penton_secondary_email->value();
      }
      drupal_mail(
        'penton_comment',
        'comment_posted_notify',
        trim(implode(', ', $emails), ', '),
        $lang,
        array(
          'subject' => t('New Comment Notification'),
          'message' => t("A comment has been posted to !node_title: \n '!comment_body' \n !node_url", array(
            '!node_title' => $node->title,
            '!comment_body' => $comment->subject,
            '!node_url' => url('node/' . $node->nid, array('absolute' => TRUE)),
          )),
        )
      );
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function penton_comment_preprocess_node(&$variables) {
  if (!node_is_page($variables['node']) || !in_array($variables['type'], array('article', 'data_table_detail'))) {
    return;
  }
  if ($variables['type'] == 'article') {
    module_load_include('inc', 'pathauto');
    $node_meta = entity_metadata_wrapper('node', $variables['node'], array('bundle' => 'article'));
    $article_subtype_term = $node_meta->field_penton_article_type->get(0)->value();
    $article_subtype = 'article';
    if ($article_subtype_term) {
      $article_subtype = pathauto_cleanstring($article_subtype_term->name);
    }
    if (in_array($article_subtype, array('white-paper', 'webinar'))) {
      return;
    }
  }
  drupal_add_js(drupal_get_path('module', 'penton_comment') . '/scripts/comments.js', array('group' => JS_DEFAULT));
}
