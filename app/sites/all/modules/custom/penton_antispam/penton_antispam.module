<?php
/**
 * @file
 * Antispam module file.
 */

/**
 * Adding antispam processing to user login form.
 *
 * Implements hook_form_FORM_ID_alter().
 */
function penton_antispam_form_user_login_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = '_antispam_login_check';
}

/**
 * Adding antispam validation to comment form.
 *
 * Implements hook_form_FORM_ID_alter().
 */
function penton_antispam_form_comment_form_alter(&$form, &$form_state, $form_id) {
  $form_state['mollom']['discard'] = FALSE;
  $form['#validate'][] = '_antispam_mollom_check_comment_validate';
  $form['#validate'][] = '_antispam_form_check';
}

/**
 * Adding antispam validation to user profile.
 *
 * Implements hook_form_FORM_ID_alter().
 */
function penton_antispam_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = '_antispam_form_check';
}

/**
 * Adding clear handler to user administration form.
 *
 * Implements hook_form_FORM_ID_alter().
 */
function penton_antispam_form_user_admin_account_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = '_antispam_clear';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function penton_antispam_form_penton_user_register_email_this_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = '_antispam_mollom_check_validate';
}

/**
 * Cleans spam attempts and banned time.
 */
function _antispam_clear($form, $form_state) {
  if (isset($form_state['values']['operation']) && $form_state['values']['operation'] == 'unblock' && !empty($form_state['values']['accounts'])) {
    foreach ($form_state['values']['accounts'] as $uid) {
      $user = user_load($uid);
      if (isset($user->data['antispam'])) {
        unset($user->data['antispam']);
        user_save($user);
      }
    }
  }
}

/**
 * Login validation to check if user has been banned.
 *
 * @param array $form
 *   Form
 * @param array $form_state
 *   Form state
 */
function _antispam_login_check($form, $form_state) {
  if (!empty($form_state['uid'])) {
    $user = user_load($form_state['uid']);
  }
  if (empty($user) && !empty($form_state['values']['name'])) {
    $user = user_load_by_name($form_state['values']['name']);
  }
  if (empty($user) && !empty($form_state['values']['name'])) {
    $user = user_load_by_mail($form_state['values']['name']);
  }
  if (!empty($user) && $user->status == 0) {
    if (!empty($user->data['antispam']['banned'])
      && is_int($user->data['antispam']['banned'])
      && $user->data['antispam']['banned'] < time()) {
      unset($user->data['antispam']['banned']);
      $user->status = 1;
      $user = user_save($user);
    }
    if ($user->status == 0) {
      form_clear_error();
      drupal_get_messages();
      form_set_error('name', _banned_warning($user));
    }
    else {
      $errors = form_get_errors();
      if (isset($errors['name']) && count($errors) == 1) {
        form_clear_error();
        drupal_get_messages();
      }
    }
  }
}

/**
 * Validation function to check if form data checked as spam.
 *
 * @param array $form
 *   Form
 * @param array $form_state
 *   Form state
 */
function _antispam_form_check($form, &$form_state) {
  global $user;

  if (_antispam_check_mollom_status($form_state) && !empty($user->uid)) {

    if (!empty($user->data['antispam'])) {
      $antispam = $user->data['antispam'];
    }
    else {
      $antispam = array('spam' => 0);
    }
    $antispam['spam']++;
    $banned = 0;
    switch ($antispam['spam']) {
      case 5:
        $banned = 1;
        break;

      case 10:
        $banned = 6;
        break;

      case 15:
        $banned = 24;
        break;

      case 20:
        $banned = 'permanent';
        break;
    }
    if (!empty($banned)) {
      if (is_int($banned)) {
        $antispam['banned'] = time() + 60 * 60 * $banned;
      }
      else {
        $antispam['banned'] = $banned;
      }
      $user->status = 0;
    }
    $user->data['antispam'] = $antispam;
    $user = user_save($user);
    drupal_set_message(_banned_warning($user), 'warning');
    if (!empty($banned)) {
      module_invoke_all('user_logout', $user);
      if (empty($form_state['triggering_element']['#ajax'])) {
        drupal_goto();
      }
      else {
        $form_state['redirect'] = '<front>';
      }
    }
  }
}

/**
 * Validates comment field with spam filter.
 */
function _antispam_mollom_check_comment_validate($form, &$form_state) {
  if (_antispam_check_mollom_status($form_state)) {
    foreach ($form_state['mollom']['enabled_fields'] as $field) {
      $tmp_form_state                             = $form_state;
      $tmp_form_state['mollom']['enabled_fields'] = array($field);

      mollom_validate_analysis($form, $tmp_form_state);

      if (_antispam_check_mollom_status($tmp_form_state)) {
        form_set_error($field, t('Sorry, your comment triggered the spam filter and cannot be posted. Please edit your message, then try republishing.'));
      }
    }
  }
}

/**
 * Validates each spam defended field in the email-this form.
 */
function _antispam_mollom_check_validate($form, &$form_state) {
  if (_antispam_check_mollom_status($form_state)) {
    foreach ($form_state['mollom']['enabled_fields'] as $field) {
      $tmp_form_state                             = $form_state;
      $tmp_form_state['mollom']['enabled_fields'] = array($field);

      mollom_validate_analysis($form, $tmp_form_state);

      if (_antispam_check_mollom_status($tmp_form_state)) {
        form_set_error($field, t('Sorry, your comment triggered the spam filter and cannot be posted. Please edit your message. If you feel this is in error, !block_link', array(
          '!block_link' => l(t('please report that you are blocked.'), 'mailto:usercare@penton.com'),
        )));
      }
    }
  }
}

/**
 * Checks mollom spam status in $form_state.
 */
function _antispam_check_mollom_status($form_state) {
  $result = FALSE;

  if (!empty($form_state['mollom']['response']['content']['spamClassification'])) {
    $result = 'spam' == $form_state['mollom']['response']['content']['spamClassification'];
  }

  return $result;
}

/**
 * Generate warning message for banned users.
 *
 * @param StdClass $user
 *   User object
 *
 * @return null|string
 *   Message
 */
function _banned_warning($user) {
  if (!empty($user->data['antispam']['banned'])) {
    $banned = $user->data['antispam']['banned'];
  }
  if (!empty($banned) && is_int($banned)) {
    $seconds = $banned - time();
    if ($seconds >= 3600) {
      $timeframe['hours'] = format_plural(floor($seconds / 3600), '1 hour', '@count hours');
      $seconds = $seconds % 3600;
    }
    if ($seconds >= 60) {
      $timeframe['minutes'] = format_plural(floor($seconds / 60), '1 minute', '@count minutes');
    }
    elseif (empty($timeframe['hours'])) {
      $timeframe['minutes'] = t('1 minute');
    }
    return t('Sorry, your account is temporarily disabled for the next %timeframe. Please <a href="mailto:usercare@penton.com">contact customer service</a> for assistance.', array(
      '%timeframe' => implode(' ', $timeframe),
    ));
  }
  if ((!empty($banned) && !is_int($banned)) || $user->status == 0) {
    return t('Sorry, your account is currently blocked. Please <a href="mailto:usercare@penton.com">contact customer service</a> for assistance.');
  }
  return NULL;
}
