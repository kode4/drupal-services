<?php
/**
 * @file
 * Include Helper functions for the penton gated generate module.
 */

/**
 * Helper function to generate users, optionally delete all users but uid 1.
 *
 * @param bool|TRUE $clean
 *   Set to TRUE to delete all users but admin UID 1.
 *
 * @throws \Exception
 */
function _penton_gated_generate_users($clean = TRUE) {
  if ($clean) {
    // Clean existing users apart from UID 1 (admin).
    $uids = db_select('users', 'u')
      ->fields('u', array('uid'))
      ->condition('uid', 1, '>')
      ->execute()
      ->fetchAllAssoc('uid');
    user_delete_multiple(array_keys($uids));
    drupal_set_message(format_plural(count($uids), '1 user deleted', '@count users deleted.'));
  }

  // Determine if we should create user pictures.
  $pic_config = FALSE;
  module_load_include('inc', 'system', 'image.gd');
  if (variable_get('user_pictures', 0) && function_exists('image_gd_check_settings') && image_gd_check_settings()) {
    $pic_config['path'] = variable_get('user_picture_path', 'pictures');
    list($pic_config['width'], $pic_config['height']) = explode('x', variable_get('user_picture_dimensions', '85x85'));
  }

  // Create users.
  $gated_users = array(
    'basic',
    'advanced',
    'premium',
    'ungated_author',
    'basic_gated_author',
    'advanced_gated_author',
    'premium_gated_author',
    'private_user',
  );
  foreach ($gated_users as $name) {
    // If users already exist, delete them and recreate.
    if ($existing_gated_user = user_load_by_name($name)) {
      user_delete($existing_gated_user->uid);
    }

    $edit = array(
      'name' => $name,
      'pass' => $name,
      'mail' => $name . '@yopmail.com',
      'status'  => 1,
    );

    // Populate all core fields on behalf of field.module
    module_load_include('inc', 'devel_generate');
    module_load_include('inc', 'devel_generate', 'devel_generate.fields');
    $edit = (object) $edit;
    $edit->language = LANGUAGE_NONE;
    devel_generate_fields($edit, 'user', 'user');
    // Devel generate does not populate all profile fields. Add them.
    if (isset($edit->field_penton_profile)) {
      unset($edit->field_penton_profile['und'][0]['name_line']);
      $edit->field_penton_profile['und'][0]['first_name'] = "$name First name";
      $edit->field_penton_profile['und'][0]['last_name'] = "$name Last name";
      $edit->field_penton_profile['und'][0]['organisation_name'] = "$name Organisation name";
    }
    $edit = (array) $edit;

    // Make sure all users are public by default.
    $edit['field_penton_display_profile']['und'][0]['value'] = 1;

    switch ($name) {
      // Make sure specific users get appropriate values depending on their
      // type.
      case 'basic':
        // Remove answers to questions on basic user generated by devel.
        if (isset($edit['field_penton_question1']['und'][0]['value'])) {
          unset($edit['field_penton_question1']['und'][0]['value']);
        }
        if (isset($edit['field_penton_question2']['und'][0]['value'])) {
          unset($edit['field_penton_question2']['und'][0]['value']);
        }
        break;

      case 'advanced':
        // Add custom role.
        $edit['roles'] = array(
          DRUPAL_AUTHENTICATED_RID => TRUE,
          PENTON_GATED_ADVANCED_RID => TRUE,
        );
        break;

      case 'premium':
        // Add custom role.
        $edit['roles'] = array(
          DRUPAL_AUTHENTICATED_RID => TRUE,
          PENTON_GATED_PAID_PREMIUM_RID => TRUE,
        );
        break;

      case 'ungated_author':
        $edit['roles'] = array(
          DRUPAL_AUTHENTICATED_RID => TRUE,
          PENTON_AUTHOR_RID => TRUE,
        );
        // No need to set privacy settings here as default is ungated.
        break;

      case 'basic_gated_author':
        $edit['roles'] = array(
          DRUPAL_AUTHENTICATED_RID => TRUE,
          PENTON_AUTHOR_RID => TRUE,
        );
        $edit['field_penton_privacy_settings']['und'][0]['value'] = DRUPAL_AUTHENTICATED_RID;
        break;

      case 'advanced_gated_author':
        $edit['roles'] = array(
          DRUPAL_AUTHENTICATED_RID => TRUE,
          PENTON_AUTHOR_RID => TRUE,
        );
        $edit['field_penton_privacy_settings']['und'][0]['value'] = PENTON_GATED_ADVANCED_RID;
        break;

      case 'premium_gated_author':
        $edit['roles'] = array(
          DRUPAL_AUTHENTICATED_RID => TRUE,
          PENTON_AUTHOR_RID => TRUE,
        );
        $edit['field_penton_privacy_settings']['und'][0]['value'] = PENTON_GATED_PAID_PREMIUM_RID;
        break;

      case 'private_user':
        $edit['field_penton_display_profile']['und'][0]['value'] = 0;
        break;

    }

    // Save users and report.
    $account = user_save(drupal_anonymous_user(), $edit);

    // Add picture if possible.
    if ($pic_config) {
      // Since the image.module should scale the picture just pick an
      // arbitrary size that it's too big for our font.
      $im = imagecreatetruecolor($pic_config['width'], $pic_config['height']);

      // Randomize the foreground using the md5 of the user id, then invert it
      // for the background color so there's enough contrast to read the text.
      $parts = array_map('hexdec', str_split(md5($account->uid), 2));
      $fg = imagecolorallocate($im, $parts[1], $parts[3], $parts[5]);
      $bg = imagecolorallocate($im, 255 - $parts[0], 255 - $parts[1], 255 - $parts[2]);

      // Fill the background then print their user info.
      imagefill($im, 0, 0, $bg);
      imagestring($im, 5, 5, 5, "#" . $account->uid, $fg);
      imagestring($im, 5, 5, 25, $account->name, $fg);

      // Create an empty, managed file where we want the user's picture to
      // be so we can have GD overwrite it with the image.
      $picture_directory = variable_get('file_default_scheme', 'public') . '://' . variable_get('user_picture_path', 'pictures');
      file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY);
      $destination = file_stream_wrapper_uri_normalize($picture_directory . '/picture-' . $account->uid . '.png');
      $file = file_save_data('', $destination);

      // GD doesn't like stream wrapped paths so convert the URI to a normal
      // file system path.
      if (isset($file) && $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri)) {
        imagepng($im, $wrapper->realpath());
      }
      imagedestroy($im);

      // Clear the cached filesize, set the owner and MIME-type then re-save
      // the file.
      clearstatcache();
      $file->uid = $account->uid;
      $file->filemime = 'image/png';
      $file = file_save($file);

      // Save the user record with the new picture.
      $edit = (array) $account;
      $edit['picture'] = $file;
      // Reassign pass as it is replaced with the hashed version in $account.
      $edit['pass'] = $name;
      user_save($account, $edit);
    }

    if ($account) {
      drupal_set_message(t('Created the following user: <a href="@url">@name</a>', array('@name' => format_username($account), '@url' => url("user/$account->uid"))));
    }
  }
}

/**
 * Helper function to delete all content for a given type.
 *
 * @param array $form_state
 *   Parameters as expected by devel_generate_content_kill().
 * @param array $tids
 *   Array of term ids to associate content with.
 *
 * @return array
 *   Returns an array of the created node nids.
 */
function _penton_gated_generate_content($form_state, $tids) {
  module_load_include('inc', 'devel_generate');
  if (!empty($form_state['values']['clean'])) {
    // Clean content first.
    devel_generate_content_kill($form_state['values']);
  }

  // Prepare taxonomy terms to attach to content.
  $terms = taxonomy_term_load_multiple($tids);
  $categories_tids = array();
  $program_tids = array();
  foreach ($terms as $term) {
    if ($term->vocabulary_machine_name == 'program') {
      $program_tids[] = $term->tid;
    }
    elseif ($term->vocabulary_machine_name == 'categories') {
      $categories_tids[] = $term->tid;
    }
  }

  // Generate content.
  $nodes = array(
    'ungated' => array(
      'type' => 'article',
      'title' => 'Ungated article',
      'terms' => array(
        'field_penton_primary_category' => reset($categories_tids),
        'field_penton_secondary_category' => reset($categories_tids),
        'field_penton_program' => reset($program_tids),
      ),
      'privacy_settings' => 1,
    ),
    'ungated_pinned_category' => array(
      'type' => 'article',
      'title' => 'Ungated article pinned to Category',
      'terms' => array(
        'field_penton_primary_category' => reset($categories_tids),
        'field_penton_secondary_category' => reset($categories_tids),
        'field_penton_program' => reset($program_tids),
      ),
      'privacy_settings' => 1,
    ),
    'ungated_pinned_program' => array(
      'type' => 'article',
      'title' => 'Ungated article pinned to Program',
      'terms' => array(
        'field_penton_primary_category' => reset($categories_tids),
        'field_penton_secondary_category' => reset($categories_tids),
        'field_penton_program' => reset($program_tids),
      ),
      'privacy_settings' => DRUPAL_ANONYMOUS_RID,
    ),
    'basic' => array(
      'type' => 'article',
      'title' => 'Basic gated article',
      'terms' => array(
        'field_penton_primary_category' => reset($categories_tids),
        'field_penton_secondary_category' => reset($categories_tids),
        'field_penton_program' => reset($program_tids),
      ),
      'privacy_settings' => DRUPAL_AUTHENTICATED_RID,
    ),
    'advanced' => array(
      'type' => 'article',
      'title' => 'Advanced gated article',
      'terms' => array(
        'field_penton_primary_category' => reset($categories_tids),
        'field_penton_secondary_category' => reset($categories_tids),
        'field_penton_program' => reset($program_tids),
      ),
      'privacy_settings' => PENTON_GATED_ADVANCED_RID,
    ),
    'premium' => array(
      'type' => 'article',
      'title' => 'Paid premium article',
      'terms' => array(
        'field_penton_primary_category' => reset($categories_tids),
        'field_penton_secondary_category' => reset($categories_tids),
        'field_penton_program' => reset($program_tids),
      ),
      'privacy_settings' => PENTON_GATED_PAID_PREMIUM_RID,
    ),
    'redirect' => array(
      'type' => 'article',
      'title' => 'This article redirects to bbc.co.uk',
      'terms' => array(
        'field_penton_primary_category' => reset($categories_tids),
        'field_penton_secondary_category' => reset($categories_tids),
        'field_penton_program' => reset($program_tids),
      ),
      'privacy_settings' => 1,
      'redirect' => 'http://www.bbc.co.uk',
    ),
  );
  $created_nodes = array();
  foreach ($nodes as $node_properties) {
    $nid = _penton_gated_generate_node($node_properties);
    $created_nodes[] = $nid;
    drupal_set_message(t('Created the following node: <a href="@url">@title</a>', array('@title' => check_plain($node_properties['title']), '@url' => url("node/$nid"))));
  }

  // Return the nid of created nodes.
  return $created_nodes;
}

/**
 * Helper function to generate terms in a given array of vocabularies.
 *
 * Optionally delete existing terms.
 *
 * @param array $vids
 *   Array of vocabulary ids to delete terms for.
 *
 * @return array
 *   Array of created terms.
 */
function _penton_gated_generate_terms($vids) {
  module_load_include('inc', 'devel_generate');
  foreach ($vids as $vid) {
    // Clean terms first.
    devel_generate_delete_vocabulary_terms($vid);
  }
  drupal_set_message(t('Deleted existing terms.'));

  // Now add terms for each vocabulary.
  $vocabularies = taxonomy_vocabulary_load_multiple($vids);
  $created_terms = array();
  foreach ($vocabularies as $vid => $vocabulary) {
    $term = new stdClass();
    $term->vid = $vid;
    if ($vocabulary->machine_name == 'categories') {
      $term->name = 'Category';
    }
    else {
      $term->name = ucfirst($vocabulary->machine_name);
    }
    // Populate core fields.
    module_load_include('inc', 'devel_generate', 'devel_generate.fields');
    devel_generate_fields($term, 'taxonomy_term', $vocabulary->machine_name);

    $status = taxonomy_term_save($term);
    if ($status == SAVED_NEW) {
      $created_terms[] = $term->tid;
      drupal_set_message(t('Created the following term: <a href="@url">@name</a>', array('@name' => check_plain($term->name), '@url' => url("taxonomy/term/$term->tid"))));
    }
  }

  return $created_terms;
}

/**
 * Helper function to populate nodes.
 *
 * @param array $node_properties
 *   Array of properties to build nodes.
 *
 * @return int
 *   Node id of the created node.
 */
function _penton_gated_generate_node($node_properties) {
  // Ungated article.
  $node = new stdClass();
  $node->title = $node_properties['title'];
  $node->type = $node_properties['type'];
  $node->language = LANGUAGE_NONE;
  node_object_prepare($node);
  $node->uid = 1;
  // We want it published.
  $node->status = 1;
  if ($node->type == 'article') {
    // Make sure comments are enabled on articles.
    $node->comment = COMMENT_NODE_OPEN;
    // Prepare for comments.
    module_load_include('inc', 'devel_generate');
    $users = devel_get_users();
    $users = array_merge($users, array('0'));
    $results = array(
      'users' => $users,
      'max_comments' => '5',
      'title_length' => '4',
    );
    $node->penton_gated_generate = $results;
  }
  // Populate all core fields on behalf of field.module with dummy content,
  // we will update our fields later.
  module_load_include('inc', 'devel_generate', 'devel_generate.fields');
  devel_generate_fields($node, 'node', $node->type);

  // Now set gating level depending on privacy settings field.
  $node->field_penton_privacy_settings[$node->language][0]['value'] = $node_properties['privacy_settings'];
  // Secondary category recieves multiple times the same term, reset to one.
  if (isset($node->field_penton_secondary_category[$node->language])) {
    unset($node->field_penton_secondary_category[$node->language]);
  }
  // Add taxonomy terms for Primary terms and Program.
  foreach ($node_properties['terms'] as $field_name => $tid) {
    $node->{$field_name}[$node->language][0]['tid'] = $tid;
  }

  // Don't redirect apart from the redirect article. This field is filled by
  // devel_generate by default, making all articles redirect to homepage.
  // Make also sure article_type is properly set.
  $link_term = taxonomy_get_term_by_name('Link', 'article_type');
  if (!empty($link_term)) {
    $link_term = reset($link_term);
    $link_tid = $link_term->tid;
  }
  if (!isset($node_properties['redirect'])) {
    unset($node->field_penton_link);
  }
  else {
    $node->field_penton_link[LANGUAGE_NONE][0]['url'] = $node_properties['redirect'];
    if ($link_tid) {
      $node->field_penton_article_type[LANGUAGE_NONE][0]['tid'] = $link_tid;
    }
  }

  // Prepare node for saving and save.
  $node = node_submit($node);
  node_save($node);

  // Return nid for further usage.
  return $node->nid;
}

/**
 * Helper function to pin articles to taxonomy terms.
 *
 * @param array $nids
 *   Array of node ids to be pinned to term.
 * @param object $term
 *   Term where you want your articles to be pinned to.
 */
function _penton_gated_generate_pin($nids, $term) {
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    if (strpos($node->title, 'pinned') && strpos($node->title, $term->name)) {
      $term->field_penton_pinned_elements['und'][0] = array(
        'target_id' => (int) $node->nid,
        'target_type' => 'node',
      );
      taxonomy_term_save($term);
    }
  }
}
