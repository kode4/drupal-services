<?php

/**
 * @file
 * Manages Penton gated content.
 */

/**
 * Define role id for advanced gating.
 */
define('PENTON_GATED_ADVANCED_RID', 3);

/**
 * Define role id for Paid premium.
 */
define('PENTON_GATED_PAID_PREMIUM_RID', 4);

/**
 * Define length for trimmed gated body.
 */
define('PENTON_GATED_TRIMMED_BODY_LENGTH', 500);

/**
 * Implements hook_entity_view().
 */
function penton_gated_entity_view($entity, $type, $view_mode, $langcode) {
  $gating_level = _penton_gated_get_level($entity);

  if (in_array($gating_level, array(
    DRUPAL_AUTHENTICATED_RID,
    PENTON_GATED_ADVANCED_RID,
    PENTON_GATED_PAID_PREMIUM_RID,
  ))) {
    $need_to_gate = ($type == 'node' && $entity->type == 'article') || $type == 'user';
    if ($need_to_gate && $view_mode == 'full' && !user_has_role($gating_level)) {
      // Get markup for gated level.
      $markup = _penton_gated_generate_markup($gating_level);
      $entity->content['invite'] = array(
        // Please note that in Sprint#1 there is no purchase option yet,
        // linking to register.
        '#markup' => $markup,
      );
    }
    // Display gated level message for content managers.
    if (user_access('administer nodes') && user_access('administer users') && $type == 'node' && $entity->type == 'article') {
      $role = user_role_load($gating_level);
      if ($view_mode == 'full') {
        drupal_set_message(t('This content accessible for users with %role role.', array('%role' => $role->name)));
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function penton_gated_preprocess_node(&$variables) {
  // Truncate body if article is gated.
  if (isset($variables['content']['invite'])) {
    $body_value_trimmed = truncate_utf8($variables['body'][0]['value'], PENTON_GATED_TRIMMED_BODY_LENGTH);
    $body_safe_value_trimmed = truncate_utf8($variables['body'][0]['safe_value'], PENTON_GATED_TRIMMED_BODY_LENGTH);
    $body_safe_value_trimmed = '<div class="advanced-body">' . $body_safe_value_trimmed . '</div>';
    $variables['body'][0]['value'] = $body_value_trimmed;
    $variables['body'][0]['safe_value'] = $body_safe_value_trimmed;
    $variables['node']->body[LANGUAGE_NONE][0]['value'] = $body_value_trimmed;
    $variables['node']->body[LANGUAGE_NONE][0]['safe_value'] = $body_safe_value_trimmed;
    $variables['gated_class'] = ' article-gated';
  }
  // Add a new class for gated content to display gated icon.
  $gating_level = _penton_gated_get_level($variables['elements']['#node']);
  if ($gating_level != 1) {
    $variables['classes_array'][] = 'node-gated';
  }
}

/**
 * Implements hook_user_presave().
 */
function penton_gated_user_presave(&$edit, $account, $category) {
  // Make this option only available to end users.
  global $user;
  if (isset($account->uid) && $user->uid == $account->uid) {
    // Check if user already have role. Do nothing if he does.
    if (!user_has_role(PENTON_GATED_ADVANCED_RID, $account)) {
      // Add role Advanced registered user if all required fields are completed.
      if (!empty($edit['field_penton_question1'][LANGUAGE_NONE][0]['value']) &&
        !empty($edit['field_penton_question2'][LANGUAGE_NONE][0]['value'])) {
        $edit['roles'][PENTON_GATED_ADVANCED_RID] = PENTON_GATED_ADVANCED_RID;
        drupal_set_message(t('You are now granted with role Advanced registered'));
      }
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function penton_gated_entity_view_alter(&$build, $type) {
  // Make sure gated content cannot be printed in full view mode if user is not
  // allowed to.
  if (module_enable(array('print'), FALSE)) {
    if ($type == 'node' && $build['#view_mode'] == PRINT_VIEW_MODE) {
      // Get gating level.
      $gating_level = _penton_gated_get_level($build['#node']);
      if (!user_has_role($gating_level)) {
        // Prepare build of a limited display according to gating.
        $view_mode = _penton_gated_get_view_mode($gating_level, $build['#view_mode']);
        $gated_node = clone $build['#node'];
        node_build_content($gated_node, $view_mode);
        // Align the build with the gating level.
        foreach ($build as $field_name => $properties) {
          if (strpos($field_name, 'field_') === 0 || $field_name == 'body') {
            if (!isset($gated_node->content[$field_name])) {
              unset($build[$field_name]);
            }
          }
        }
      }
    }
  }
}

/**
 * Helper function to determine gating level for a given entity.
 *
 * @param object $entity
 *   The entity against which we need to know gating level.
 *
 * @return int
 *   Gating level. Defaults to 1 (ungated).
 */
function _penton_gated_get_level($entity) {
  // Defaults to ungated.
  $level = isset($entity->field_penton_privacy_settings[LANGUAGE_NONE][0]['value']) ? (int) $entity->field_penton_privacy_settings[LANGUAGE_NONE][0]['value'] : 1;
  return $level;
}

/**
 * Helper function to retrieve view mode based on gating level of content.
 *
 * @param int $gating_level
 *   The gating level, as expected by the constants defined.
 * @param string $current_view_mode
 *   The current view mode, if any, defaults to 'full'.
 *
 * @return bool|string
 *   Returns view mode mapped to the given gating level,
 *   or FALSE if gating level is not mapped.
 */
function _penton_gated_get_view_mode($gating_level = DRUPAL_ANONYMOUS_RID, $current_view_mode = 'full') {
  $gating_mapping = array(
    DRUPAL_ANONYMOUS_RID => $current_view_mode,
    DRUPAL_AUTHENTICATED_RID => 'penton_basic_gated',
    PENTON_GATED_ADVANCED_RID => 'penton_advanced_gated',
    PENTON_GATED_PAID_PREMIUM_RID => 'penton_premium_gated',
  );
  if (!array_key_exists($gating_level, $gating_mapping)) {
    return FALSE;
  }
  else {
    return $gating_mapping[$gating_level];
  }
}

/**
 * Helper function for getting nodeblock delta for user RID.
 *
 * @param int $user_rid
 *   User Role ID.
 *
 * @return bool
 *   Return node's nid as block delta if we have Upgrade Block node which is
 *   connected with $user_rid - role ID of false if this node is not exists.
 */
function _penton_gated_load_nodeblock_delta($user_rid) {
  // Use EntityFieldQuery for getting required node entity.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'gating_copy')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_penton_privacy_settings', 'value', $user_rid, '=')
    ->range(0, 1);

  $result = $query->execute();
  // If we get correct node - we can return it's nid.
  // If we do not get correct result - return false.
  if (isset($result['node'])) {
    return end($result['node'])->nid;
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function which generates block markup.
 *
 * @param int $user_rid
 *   User Role ID.
 *
 * @return array|bool
 *   Markup if correct block exists or false if this array
 *   is empty or not exists.
 */
function _penton_gated_generate_markup($user_rid) {
  // Getting block delta for current role ID.
  $block_delta = _penton_gated_load_nodeblock_delta($user_rid);
  // If node for this role exists - load and render block with this delta.
  if (!empty($block_delta)) {
    $block = module_invoke('nodeblock', 'block_view', $block_delta);
    return render($block['content']);
  }
  return '';
}
