<?php
/**
 * @file
 * Provides automated tests for the penton_gated module.
 * It relies on the penton_gated_generate module to create test content.
 *
 * In this file, what we call content is nodes and their attached comments.
 */

/**
 * Class PentonGatedTestCase
 *
 * Tests the gated content.
 */
class PentonGatedTestCase extends DrupalWebTestCase {

  /**
   * Register the test case to the Drupal Testing suite.
   */
  public static function getInfo() {
    return array(
      'name' => "Penton gated",
      'description' => "Make sure Penton gated features work properly.",
      'group' => "Penton",
    );
  }

  /**
   * Set up prerequisites to run tests.
   */
  public function setUp() {
    // Contrib fe_blocks breaks the test if using default install profile.
    // See https://www.drupal.org/node/2025817 for details.
    $this->profile = 'testing';

    // Enable modules needed for the test.
    // Dependencies are enabled automatically.
    $modules = array(
      'penton_gated_generate',
      'penton_taxonomy',
      'penton_categories',
      'penton_program',
      'penton_article',
      'penton_core',
      'comment',
      'field',
      'field_sql_storage',
      'field_ui',
      'file',
      'filter',
      'image',
      'list',
      'menu',
      'node',
      'number',
      'options',
      'path',
      'text',
      'user',
      'date',
      'date_api',
      'devel',
      'devel_generate',
      'features',
      'entityreference',
      'fences',
      'role_field',
      'entity',
      'libraries',
      'logintoboggan',
      'modal_forms',
      'pathauto',
      'strongarm',
      'token',
      'penton_gated',
      'taxonomy',
      'penton_date_formats',
      'penton_field_bases',
      'penton_media_entity',
      'penton_modal_forms',
      'penton_permissions',
      'penton_text_formats',
      'penton_user_info',
      'metatag',
      'variable',
    );
    parent::setUp($modules);

    // All users we need are created by the penton_gated_generate module
    // apart from the admin user which will actually create them and all related
    // content.
    $this->admin_user = $this->drupalCreateUser(array(
      'administer taxonomy',
      'administer nodes',
      'bypass node access',
      'administer content types',
      'generate penton gated',
      'administer users',
      'administer comments',
    ));
    // Create a basic user.
    $this->std_user = $this->drupalCreateUser(array());
    // Create an advanced registered user.
    $advanced = $this->drupalCreateUser(array());
    $advanced->roles = array(PENTON_GATED_ADVANCED_RID => PENTON_GATED_ADVANCED_RID);
    $this->advanced_user = $advanced;

    // Now login the admin and create content.
    $this->drupalLogin($this->admin_user);
    $edit = array(
      // Nothing to clean here, db is empty anyway.
      'clean' => FALSE,
      // Simpletest does not handle the users creation in the module.
      // We will create them in the tests below.
      'generate_users' => FALSE,
    );
    $this->drupalPost('admin/config/development/penton_gated_generate', $edit, t('Generate'));

  }

  /**
   * Checks that the generation of content went well.
   */
  public function testPentonGatedGenerate() {
    $this->assertText(t('Created the following term:'));
    $this->assertText(t('Created the following node:'));
  }

  /**
   * Check Anonymous access against ungated content.
   */
  public function testPentonGatedAccessUngatedAnonymous() {
    // Make sure we're anonymous.
    if ($this->loggedInUser) {
      $this->drupalLogout();
    }
    $this->drupalLogin($this->admin_user);
    // Go to a term page, all content created shall be in there.
    $this->drupalGet('taxonomy/term/1/edit');
    $this->assertText('Ungated article');
    $this->drupalGet('node/1/edit');
    $this->assertText('Ungated article');
  }

}
