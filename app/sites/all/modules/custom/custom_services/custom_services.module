<?php
/**
 * custom service module extend some core function from service module in contrib
 * @Author DinhBang19@gmail.com
 * @return array
 */

function custom_services_menu()
{
    $items = array();
    $endpoints = services_endpoint_load_all();
    $path = '';
    $endName = '';
    foreach ($endpoints as $endpoint) {
        if (empty($endpoint->disabled)) {
            $path = $endpoint->path;
            $endName = $endpoint->name;
        }
    }
    $items[$path.'/node.json'] = array(
        'title'             => 'Custom Services endpoint',
        'page callback' => 'custom_services_endpoint_callback',
        'access callback'   => "custom_services_access_menu",
        'page arguments'    => array($endName),
        'type' => MENU_CALLBACK,
    );
    $items[$path.'/user.json'] = array(
        'title'             => 'Custom Services endpoint',
        'page callback' => 'custom_services_endpoint_callback',
        'access callback'   => "custom_services_access_menu",
        'page arguments'    => array($endName),
        'type' => MENU_CALLBACK,
    );
    $items[$path.'/taxonomy_term.json'] = array(
        'title'             => 'Custom Services endpoint',
        'page callback' => 'custom_services_endpoint_callback',
        'access callback'   => "custom_services_access_menu",
        'page arguments'    => array($endName),
        'type' => MENU_CALLBACK,
    );
    $items[$path.'/file.json'] = array(
        'title'             => 'Custom Services endpoint',
        'page callback' => 'custom_services_endpoint_callback',
        'access callback'   => "custom_services_access_menu",
        'page arguments'    => array($endName),
        'type' => MENU_CALLBACK,
    );
    $items['services/session/token'] = array(
        'page callback' => '_custom_services_session_token',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    //print_r($items);die("sss");
    return $items;
}
function custom_services_endpoint_callback($endpoint_name) {
    module_load_include('inc', 'custom_services', 'includes/custom_services.runtime');
    $cache_key = 'services:' . $endpoint_name . ':resources';
    if ((!$cache = cache_get($cache_key)) || !isset($cache->data)) {
        module_load_include('inc', 'custom_services', 'includes/services.resource_build');
        $resources = _services_build_resources($endpoint_name);
        cache_set($cache_key, $resources);
    }
    // Explicitly set the title to avoid expensive menu calls in token
    // and elsewhere.
    if (!($title = drupal_set_title())) {
        drupal_set_title('Services endpoint');
    }

    $endpoint = services_endpoint_load($endpoint_name);
    $server = $endpoint->server;
    if (function_exists($server . '_server')) {

        // call the server
        services_set_server_info_from_array(array(
            'module'        => $server,
            'endpoint'      => $endpoint_name,
            'endpoint_path' => $endpoint->path,
            'debug'         => $endpoint->debug,
            'settings'      => $endpoint->server_settings,
        ));
        if ($endpoint->debug) {
            watchdog('custom_services', 'Calling server: %server', array('%server' => $server . '_server'), WATCHDOG_DEBUG);
            watchdog('custom_services', 'Server info main object: <pre>@info</pre>', array('@info' => print_r(services_server_info_object(), TRUE)), WATCHDOG_DEBUG);
        }

        //die("dinhbang");
        print call_user_func($server . '_server');
        //die("sssb");
        // Do not let this output
        drupal_page_footer();
        exit();
    }

    // return 404 if the server doesn't exist
    drupal_not_found();
}
function custom_services_resource_build_index_query($query, $page, $fields, $parameters, $page_size, $resource, $options = array()) {
    $default_limit = variable_get("services_{$resource}_index_page_size", 20);
    if (!user_access('perform unlimited index queries') && $page_size > $default_limit) {
        $page_size = $default_limit;
    }
    if(isset($_GET['pagesize'])) {
        $page_size = $_GET['pagesize'];
    }
    $query->range($page * $page_size, $page_size);
    if ($fields == '*') {
        $query->fields('t');
    }
    else {
        $query->fields('t', explode(',', $fields));
    }
    /*if (isset($parameters) && is_array($parameters)) {
        foreach ($parameters as $parameter => $parameter_value) {
            $op = 'IN';
            if (isset($options['parameters_op']) && isset($options['parameters_op'][$parameter])) {
                $op = strtoupper($options['parameters_op'][$parameter]);
            }
            echo $parameter.services_str_getcsv($parameter_value).$op;
            echo "||||";
            $query->condition($parameter, services_str_getcsv($parameter_value), $op);
        }
    }*/
    if(isset($_GET['type'])) {
        $query->condition('type',(string)$_GET['type'],'=');
    }
    if(isset($_GET["sort"]) AND $_GET["direction"]) {
        $query->orderBy($_GET["sort"], $_GET["direction"]);
    } else if (isset($options['orderby'])) {
        foreach($options['orderby'] as $column => $sort) {
            $query->orderBy($column, $sort);
        }
    }
}
function custom_services_get_parameter($query,$type="") {
    if(isset($_GET['parameters'])) {
        foreach($_GET['parameters'] as $field => $value) {
            $arr = explode(',', $value);
            if($field == 'roles') {
                $query->condition('r.name',$arr, "IN");
            } else if($field == 'vocabulary') {
                $query->condition('tv.name',$arr, "IN");
            }
            else {
                $isDateFilter = _custom_services_filter_date($field, $value, $query,$type);
                //var_dump($query);die;
                if($isDateFilter === false) {
                    $query->condition('t.'.$field,$arr, "IN");
                }
            }

        }
    }
    return $query;
}

/**
 * @Des filter date time field
 * @param $key
 * @param $value
 * @param $query
 * @return bool
 */
function _custom_services_filter_date($key, $value, $query,$type="")
{
    $table = 't.';
    if($type == 'taxonomy_term') {
        $query->innerjoin('term_authoring_info', 'ti', 't.tid = ti.tid');
        //$query->groupBy("ti.tid");
        $table = 'ti.';
    } 
    $today = _custom_services_today($value);
    if ($today !== false) {
        //echo $today;
        $today = strtotime($today);
        /*echo '|'.date('Y-m-d',1469027782);
        echo "|".$today;*/
        $query->condition($table . $key, $today, ">=");
        $query->condition($table . $key, $today + 86399, "<=");
        //var_dump($query);
        return $query;
    }
    $arr = explode('|',$value);
    if (isset($arr[0])) {
        $arrDate = explode('-', $arr[0]);
        //print_r($arrDate);
        if (isset($arrDate[0]) && count($arrDate) == 3 && strlen($arrDate[0]) == 4) {
            $timeStart = mktime(0,0,0,$arrDate[1],$arrDate[2],$arrDate[0]);
            $query->condition($table . $key, $timeStart, ">=");
            if (isset($arr[1])) {
                $arrDate = explode("-", $arr[1]);
                if (isset($arrDate[0]) && count($arrDate) == 3 && strlen($arrDate[0]) == 4) {
                    $timeEnd = mktime(0,0,0,$arrDate[1],$arrDate[2],$arrDate[0])+86399;
                } else {
                    $timeEnd = $timeStart + 86399;
                }

            } else {
                $timeEnd = $timeStart + 86399;
            }
            $query->condition($table . $key, $timeEnd, "<=");
            //var_dump($query);die;
            return true;
        }
    }
    return false;

}

function _custom_services_today($value)
{
    $value = strtolower($value);
    if ($value === 'today') {
        $value = date("Y-m-d");
        return $value;
    }
    return false;
}
function custom_services_resource_build_index_list($results, $type, $field) {
    // Put together array of matching items to return.
    $items = array();
    $isFull = isset($_GET['viewtype'])?$_GET['viewtype']:"";
    foreach ($results as $result) {
        if ($uri = services_resource_uri(array($type, $result->{$field}))) {
            $result->uri = $uri;
            if($isFull == "full") {
                if($type == 'node') {
                    $node = _node_resource_retrieve($result->nid);
                } else if($type == 'user') {
                    $node = _user_resource_retrieve($result->uid);
                } else if($type == 'file') {
                    $node = _file_resource_retrieve($result->fid,true);
                } else if($type == 'taxonomy_term') {
                    //die("sss");_taxonomy_term_resource_retrieve
                    $node = _taxonomy_term_resource_retrieve($result->tid);
                    $parent = _custom_taxonomy_parent($result->tid);
                    if(isset($parent->parent)) {
                        $node->parent = $parent->parent;
                    }
                }
            } else {
                $node = $result;
            }
            if ($type == 'user') {
                services_remove_user_data($node);
            }
        }
        $items[] = $node;
    }
    return $items;
}
function custom_services_services_resources() {
    module_load_include('inc', 'custom_services', 'includes/services.resource_build');
    // Return resources representing legacy services
    return _services_core_resources();
}
/**
 * Page callback to generate token.
 */
function _custom_services_session_token() {
    drupal_add_http_header('Content-Type', 'text/plain');
    print drupal_get_token('services');
    drupal_exit();
}
function custom_services_access_menu() {
    return TRUE;
}