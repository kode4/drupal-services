<?php
/**
 * @file
 * Penton content manager.
 */

/**
 * Define role id for role content manager.
 */
define('PENTON_CONTENT_MANAGER_RID', 8);

/**
 * Implements hook_node_insert().
 */
function penton_content_manager_node_insert($node) {
  if ($node->type == 'article'
      && isset($node->field_penton_link[LANGUAGE_NONE][0]['url'])
      && drupal_strtolower($node->field_penton_article_type[LANGUAGE_NONE][0]['name']) != 'webinar') {
    _penton_content_manager_set_redirect($node);
  }
}

/**
 * Implements hook_node_update().
 */
function penton_content_manager_node_update($node) {
  if ($node->type == 'article') {
    // Check if a redirect already exists for this node.
    $redirect = redirect_load_by_source('node/' . $node->nid);
    if (isset($node->field_penton_link[LANGUAGE_NONE][0]['url'])
        && drupal_strtolower($node->field_penton_article_type[LANGUAGE_NONE][0]['name']) != 'webinar') {
      _penton_content_manager_set_redirect($node, $redirect);
    }
    else {
      if (is_object($redirect)) {
        // There was a redirect there, delete it.
        redirect_delete($redirect->rid);
      }
    }
  }
}

/**
 * Implements hook_node_validate().
 */
function penton_content_manager_node_validate($node, $form, &$form_state) {
  if ($node->type == 'article' && isset($node->field_penton_link[LANGUAGE_NONE][0]['url'])) {
    // Check that it does not result in an infinite loop.
    // Load the destination and check if there is a redirect.
    $destination_redirect = redirect_load_by_source($node->field_penton_link[LANGUAGE_NONE][0]['url']);
    if ($destination_redirect) {
      // A redirection exist at destination, check redirects to current node.
      if ($destination_redirect->redirect == 'node/' . $node->nid) {
        form_set_error('field_penton_link', t('This will result in an infinite loop.'));
      }
    }
  }
}

/**
 * Implements hook_services_resources_alter().
 *
 * Alter the response for the taxonomy terms so that the whole term is returned
 * instead of the default taxonomy_term_save status on create and update ops.
 *
 * @see taxonomy_term_save()
 * @see _taxonomy_resource_definition()
 */
function penton_content_manager_services_resources_alter(&$resources, &$endpoint) {
  if ($endpoint->name == 'publish' && isset($endpoint->resources['taxonomy_term'])) {
    $term_operations = $endpoint->resources['taxonomy_term']['operations'];

    // Define the file which defines our resources.
    $file = array(
      'type' => 'inc',
      'module' => 'penton_content_manager',
      'name' => 'services_resources/taxonomy_resource',
    );

    // Alter term create callback if enabled.
    if ($term_operations['create']['enabled']) {
      $resources['taxonomy_term']['operations']['create']['callback'] = '_penton_taxonomy_term_resource_create';
      $resources['taxonomy_term']['operations']['create']['access callback'] = '_penton_taxonomy_resource_create_access';
      $resources['taxonomy_term']['operations']['create']['file'] = $file;
    }
    if ($term_operations['update']['enabled']) {
      $resources['taxonomy_term']['operations']['update']['callback'] = '_penton_taxonomy_term_resource_update';
      $resources['taxonomy_term']['operations']['update']['access callback'] = '_penton_taxonomy_resource_update_access';
      $resources['taxonomy_term']['operations']['update']['file'] = $file;
    }
  }
}

/**
 * Implements hook_services_request_postprocess_alter().
 *
 * Return term parents in term object on RETRIEVE calls.
 *
 * @see _taxonomy_term_resource_retrieve()
 */
function penton_content_manager_services_request_postprocess_alter($controller, $args, &$result) {
  if ($controller['callback'] == '_taxonomy_term_resource_retrieve') {
    // Retrieve callback has one arg, which is the term id.
    if ($tid = reset($args)) {
      $parents = taxonomy_get_parents($tid);
      if ($parents) {
        // Only send the term ids of the parents, not the whole term.
        $parents = array_keys($parents);
        $result->parent = $parents;
      }
    }
  }
}

/**
 * Set the redirect for a given node.
 *
 * @param object $node
 *   The node about to be saved.
 * @param object $redirect
 *   Existing redirect for this node.
 *
 * @throws \Exception
 *   Throws exception if something went wrong while saving the redirect.
 */
function _penton_content_manager_set_redirect($node, $redirect = FALSE) {
  if (!$redirect) {
    $redirect = new stdClass();
    redirect_object_prepare($redirect);
    $redirect->source = 'node/' . $node->nid;
    $redirect->redirect = $node->field_penton_link[LANGUAGE_NONE][0]['url'];
  }
  elseif ($redirect->redirect != $node->field_penton_link[LANGUAGE_NONE][0]['url']) {
    $redirect->redirect = $node->field_penton_link[LANGUAGE_NONE][0]['url'];
  }
  else {
    // Do not resave redirect if no update is required.
    return;
  }
  redirect_save($redirect);
}

/**
 * Implements hook_redirect_alter().
 */
function penton_content_manager_redirect_alter(&$redirect) {
  if (arg(0) == 'node' && is_numeric(arg(1))
      && drupal_strtolower(filter_input(INPUT_SERVER, 'HTTP_X_REQUESTED_WITH')) === 'xmlhttprequest'
      && filter_input(INPUT_GET, 'parent')) {
    $redirect->redirect = FALSE;
  }
}

/**
 * Implements hook_date_formats().
 *
 * Define additional date formats.
 */
function penton_content_manager_date_formats() {
  return array(
    array(
      'type' => 'article_date_format',
      'format' => 'M d, Y',
      'locales' => array(''),
    ),
    array(
      'type' => 'rss_date_format',
      'format' => 'D, d M Y H:i:s O',
      'locales' => array(''),
    ),
    array(
      'type' => 'article_date_format_full_month',
      'format' => 'F d, Y',
      'locales' => array(''),
    ),
  );
}

/**
 * Implements hook_date_format_types().
 *
 * Define additional date types.
 */
function penton_content_manager_date_format_types() {
  return array(
    'article_date_format' => t('Article date format'),
    'rss_date_format' => t('RSS date format'),
    'article_date_format_full_month' => t('Article date format with full month'),
  );
}

/**
 * Implements hook_filter_info_alter().
 */
function penton_content_manager_filter_info_alter(&$info) {
  $info['filter_htmlcorrector']['prepare callback'] = '_penton_content_manager_preprocess_htmlcorrector';
}

/**
 * Prepare callback for filter_htmlcorrector (full_html and filtered_html).
 *
 * 1. Escapes all closing tags within <script> tag
 * (otherwise they will be wiped out).
 * 2. Remove empty paragraphs.
 *
 * @param string $text
 *   Input string
 *
 * @return string
 *   Escaped string
 */
function _penton_content_manager_preprocess_htmlcorrector($text) {
  $text = preg_replace_callback('#<script[^>]*>(.*?)<\/script>#si', function ($matches) {
    $escaped_script = preg_replace('#<\/#', "<\\/", $matches[1]);
    return str_replace($matches[1], $escaped_script, $matches[0]);
  }, $text);
  $text = preg_replace('#<p>(\s|<\/?\s?br\s?\/?>)*<\/?p>#ui', '', $text);
  return $text;
}

/**
 * Returns additional filters for content.
 */
function penton_content_manager_additional_filters() {
  $filters = &drupal_static(__FUNCTION__);
  if (!isset($filters)) {
    if ($cache = cache_get('penton_content_manager_additional_filters')) {
      $filters = $cache->data;
    }
    else {
      // Article sub-types.
      $query = db_select('taxonomy_vocabulary', 'voc');
      $query->join('taxonomy_term_data', 'term', 'term.vid = voc.vid');
      $query->condition('voc.name', 'Article Type', '=');
      $query->fields('term', array('name'));
      $query = $query->execute();

      while ($row = $query->fetch()) {
        $article_types[$row->name] = $row->name;
      }

      $article_types['[any]'] = 'any';

      $filters['subtype'] = array(
        'title' => t('subtype'),
        'options' => $article_types,
      );

      // With featured image.
      $filters['featured_image'] = array(
        'title' => t('featured image'),
        'options' => array(
          '[any]' => t('any'),
          'yes' => t('only with'),
          'no' => t('only without'),
        ),
      );
      cache_set('penton_content_manager_additional_filters', $filters, 'cache');
    }
  }
  return $filters;
}

/**
 * Implements hook_form_FORMID_alter().
 */
function penton_content_manager_form_node_admin_content_alter(&$form, &$form_state, $form_id) {
  $filters = penton_content_manager_additional_filters();

  // Checking for already set filters.
  $filter_data = isset($_SESSION['node_overview_additional_filter']) ? $_SESSION['node_overview_additional_filter'] : array();
  foreach ($filter_data as $data) {
    $form['filter']['filters']['current'][] = array(
      '#markup' => t(
        'and where :property is :value',
        array(
          ':property' => $filters[$data[0]]['title'],
          ':value' => $filters[$data[0]]['options'][$data[1]],
        )
      ),
    );
    unset($filters[$data[0]]);
  }
  // Changing buttons if we have set filters.
  if (count($filter_data)) {
    $form['filter']['filters']['status']['actions']['undo'] = array('#type' => 'submit', '#value' => t('Undo'));
    $form['filter']['filters']['status']['actions']['reset'] = array('#type' => 'submit', '#value' => t('Reset'));
  }

  // Adding filters to the form.
  foreach ($filters as $key => $filter) {
    $form['filter']['filters']['status']['filters'][$key] = array(
      '#type' => 'select',
      '#options' => $filter['options'],
      '#title' => $filter['title'],
      '#default_value' => '[any]',
    );
  }
  $form['#submit'][] = 'penton_content_manager_add_filters_to_session';
}

/**
 * Adds filter values from form to session.
 */
function penton_content_manager_add_filters_to_session(&$form, &$form_state) {
  switch ($form_state['values']['op']) {
    case t('Filter'):
    case t('Refine'):
      $filters = penton_content_manager_additional_filters();
      foreach ($filters as $filter => $options) {
        if (isset($form_state['values'][$filter]) && $form_state['values'][$filter] != '[any]') {
          $flat_options = form_options_flatten($filters[$filter]['options']);
          if (isset($flat_options[$form_state['values'][$filter]])) {
            $_SESSION['node_overview_additional_filter'][] = array($filter, $form_state['values'][$filter]);
          }
        }
      }
      break;

    case t('Undo'):
      // TODO: only pop either standard filter or additional.
      array_pop($_SESSION['node_overview_additional_filter']);
      break;

    case t('Reset'):
      $_SESSION['node_overview_additional_filter'] = array();
      break;
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function penton_content_manager_query_node_admin_filter_alter(SelectQueryInterface $query) {
  $filter_data = isset($_SESSION['node_overview_additional_filter']) ? $_SESSION['node_overview_additional_filter'] : array();
  foreach ($filter_data as $index => $filter) {
    list($key, $value) = $filter;
    switch ($key) {
      case 'subtype':
        $query->leftJoin('field_data_field_penton_article_type', 'type', 'type.entity_id = nid');
        $query->leftJoin('taxonomy_term_data', 'term', 'term.tid = type.field_penton_article_type_tid');
        $query->condition('term.name', $value, '=');
        break;

      case 'featured_image';
        $query->leftJoin('field_data_field_penton_link_media_feat_img', 'feat', 'feat.entity_id = nid');
        if ($value == 'yes') {
          $query->isNotNull('feat.entity_id');
        }
        else {
          $query->isNull('feat.entity_id');
        }
        break;
    }
  }
}
