<?php

/**
 * @file
 * A gateway for interacting with the Vela API
 */

/**
 * Define gateway for the vela API.
 * 0 == Production, 1 == Development
 */
if (variable_get('penton_vela_gateway') == 0) {
  define('PENTON_VELA_GATEWAY_URL', 'https://vela.penton.com/');
}
else {
  define('PENTON_VELA_GATEWAY_URL', 'http://dev.vela.penton.com/');
}

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implements hook_form_FORM_ID_alter().
 */
function penton_vela_form_uc_cart_checkout_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'penton_vela_checkout_form_validate';
}

/**
 * Pass order information on to vela to validate everything is correct.
 */
function penton_vela_checkout_form_validate(&$form, &$form_state) {
  if ($form_state['submitted']) {
    global $user;
    // Create an order and add its products.
    $vela_order_request = new stdClass();
    $vela_order_request->LineItems = penton_vela_process_products_for_vela($form['panes']['cart']['cart_review_table']['#items']);

    // If the user is currently logged in.
    if ($user->uid) {
      $advantage_cust_id = $user_data->advantage_cust_id;
    }
    else {
      $advantage_cust_id = '';
    }

    $bill_to_customer = new stdClass();

    // Add the billing information.
    $vela_order_request->BillToCustomer = $bill_to_customer = new stdClass();
    if ($advantage_cust_id) {
      $bill_to_customer->AdvantageCustomerId = $advantage_cust_id;
    }
    $bill_to_customer->FirstName = $form['panes']['billing']['address']['billing_first_name']['#value'];
    $bill_to_customer->LastName = $form['panes']['billing']['address']['billing_last_name']['#value'];
    $bill_to_customer->EmailAddress = $form['panes']['customer']['primary_email']['#value'];
    $bill_to_customer->CompanyName = $form['panes']['billing']['address']['billing_company']['#value'];
    $bill_to_customer->Street1 = $form['panes']['billing']['address']['billing_street1']['#value'];
    $bill_to_customer->Street2 = $form['panes']['billing']['address']['billing_street2']['#value'];
    $bill_to_customer->City = $form['panes']['billing']['address']['billing_city']['#value'];
    $bill_to_customer->ProvinceCode = uc_get_zone_code($form['panes']['billing']['address']['billing_zone']['#value']);
    $bill_to_customer->PostalCode = $form['panes']['billing']['address']['billing_postal_code']['#value'];
    $bill_to_customer->Phone1 = $form['panes']['billing']['address']['billing_phone']['#value'];
    if (
      $bill_to_customer->FirstName
      && $bill_to_customer->LastName
      && $bill_to_customer->EmailAddress
      && $bill_to_customer->Street1
      && $bill_to_customer->City
      && $bill_to_customer->ProvinceCode
    ) {
      $country = uc_get_country_data(array('country_id' => $form['panes']['billing']['address']['billing_country']['#value']));
      if ($country === FALSE) {
        $country = array(0 => array('country_iso_code_3' => 'USA'));
      }
      $bill_to_customer->Iso3CountryCode = $country[0]['country_iso_code_3'];

      // If we have a delivery address.
      if ($form['panes']['delivery']) {
        $ship_to_customer->FirstName = $form['panes']['delivery']['address']['delivery_first_name']['#value'];
        $ship_to_customer->LastName = $form['panes']['delivery']['address']['delivery_last_name']['#value'];
        $ship_to_customer->EmailAddress = $form['panes']['customer']['primary_email']['#value'];
        $ship_to_customer->CompanyName = $form['panes']['delivery']['address']['delivery_company']['#value'];
        $ship_to_customer->Street1 = $form['panes']['delivery']['address']['delivery_street1']['#value'];
        $ship_to_customer->Street2 = $form['panes']['delivery']['address']['delivery_street2']['#value'];
        $ship_to_customer->City = $form['panes']['delivery']['address']['delivery_city']['#value'];
        $ship_to_customer->ProvinceCode = uc_get_zone_code($form['panes']['delivery']['address']['delivery_zone']['#value']);
        $ship_to_customer->PostalCode = $form['panes']['delivery']['address']['delivery_postal_code']['#value'];
        $ship_to_customer->Phone1 = $form['panes']['delivery']['address']['delivery_phone']['#value'];
        $country = uc_get_country_data(array('country_id' => $form['panes']['delivery']['address']['delivery_country']['#value']));
        if ($country === FALSE) {
          $country = array(0 => array('country_iso_code_3' => 'USA'));
        }
        $ship_to_customer->Iso3CountryCode = $country[0]['country_iso_code_3'];
        $vela_order_request->ShipToCustomer = $ship_to_customer;
      }
      else {
        $vela_order_request->ShipToCustomer = clone($vela_order_request->BillToCustomer);
      }

      // Set the currency code.
      // All transactions are done in US $.
      $vela_order_request->IsoCurrencyCode = 'US$';

      if ($form['panes']['coupon']['code']['#value']) {
        $vela_order_request->PromoCode = $form['panes']['coupon']['code']['#value'];
      }

      // Send the create order api request.
      $api_key = variable_get('penton_vela_api_key');
      $response = drupal_http_request(
        PENTON_VELA_GATEWAY_URL . $api_key . '/orders',
          array(
            'method' => 'POST',
            'data' => json_encode($vela_order_request),
            'headers' => array('Content-Type' => 'application/json', 'Accept' => 'application/json'),
          )
      );

      $vela_order_response = json_decode($response->data);

      $_SESSION['vela_order_request'] = $vela_order_request;
      $_SESSION['vela_order_response'] = $vela_order_response;

      if ($vela_order_response->Errors) {
        foreach ($vela_order_response->Errors as $error) {
          // TODO change where message appears.
          form_set_error('vela', $error->Message);
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function penton_vela_form_product_node_form_alter(&$form, &$form_state) {
  $form['base']['model']['#description'] = "Format: [Vela Item Number]:[Vela Rate Code]:[Vela Service Period (optional)]";
}

/**
 * Implements hook_js_alter().
 */
function penton_vela_js_alter(&$javascript) {
  if (isset($javascript['sites/all/modules/contrib/uc_out_of_stock/uc_out_of_stock.js']['data'])) {
    $javascript['sites/all/modules/contrib/uc_out_of_stock/uc_out_of_stock.js']['data'] = "sites/all/modules/custom/penton_vela/penton_vela_uc_out_of_stock.js";
  }
}

/**
 * Implements hook_node_validate().
 */
function penton_vela_node_validate($node, $form, &$form_state) {
  if ($node->type == "product") {
    /* Confirm that the product existis in vela before allowing the user to
     * save.
     */
    $vela_product = penton_vela_get_product_from_vela($node->model);
    if (count($vela_product->Errors) > 0) {
      $error_message = '';
      foreach ($vela_product->Errors as $error) {
        $error_message .= $error->Message;
      }
      form_set_error('model', $error_message);
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function penton_vela_node_presave($node) {
  if ($node->type == "product") {
    penton_vela_update_product($node);
  }
}

/**
 * Implements hook_node_insert().
 */
function penton_vela_node_insert($node) {
  /* Call the update function again on insert so that we can track the stock
   * with node id
   */
  if ($node->type == "product") {
    penton_vela_update_product($node);
  }
}

/**
 * Implements hook_user_login().
 */
function penton_vela_user_login(&$edit, $account) {
  $advantage_cust_id = $account->data['advantage_cust_id'];

  if ($advantage_cust_id) {
    // Send the create order api request.
    $api_key = variable_get('penton_vela_api_key');
    $response = drupal_http_request(
    PENTON_VELA_GATEWAY_URL . $api_key . '/access/' . $advantage_cust_id,
      array(
        'method' => 'GET',
        'headers' => array('Content-Type' => 'application/json', 'Accept' => 'application/json'),
      )
    );
    $vela_account = json_decode($response->data);

    // Loop over each renewable product/service in vela.
    foreach ($vela_account->AmbDetails as $vela_product) {
      // Build query to see if user has license for this product in drupal.
      $model_prefix = $vela_product->PackageId ? $vela_product->PackageId : $vela_product->AccessType . ":";
      if ($model_prefix) {
        /* Strip out vela prefix for timestamp, and then just get the first 10
         * characters (time stamps are 10 chars long).
         */
        $vela_expiration_timestamp = substr(str_replace("/Date(", "", $vela_product->ExpirationDate), 0, 10);

        // Get product role data from db.
        $product_role_data = db_select("{uc_roles_products}", "prod_role")
          ->fields("prod_role", array('rid'))
          ->condition('model', db_like($model_prefix) . '%', 'LIKE')
          ->execute()->fetchAssoc();

        // If role data exists, update it with expiration date from vela.
        if ($product_role_data['rid']) {
          // Get the expiration data for the user and role in question.
          $user_role_expiration_data = db_select("{uc_roles_expirations}", "roles_expirations")
            ->fields("roles_expirations", array('expiration'))
            ->condition('rid', $product_role_data['rid'], '=')
            ->condition('uid', $account->uid, '=')
            ->execute()->fetchAssoc();
          // If the role expiration data exists and it does not match vela.
          if (isset($user_role_expiration_data['expiration']) && $user_role_expiration_data['expiration'] != $vela_expiration_timestamp) {
            // Update the ubercart expirations to match vela.
            db_update("{uc_roles_expirations}")
                ->fields(array('expiration' => $vela_expiration_timestamp))
                ->condition('rid', $product_role_data['rid'])
                ->condition('uid', $account->uid)
                ->execute();
          }
          elseif (!isset($user_role_expiration_data['expiration'])) {
            // Grant any missing roles.
            uc_roles_grant($account, $product_role_data['rid'], $vela_expiration_timestamp);
          }
        }

        // Check to see if file download is associated expiration date instead.
        $product_file_data = db_select("{uc_file_products}", "prod_file")
        ->fields("prod_file", array('fid', 'pfid'))
        ->condition('model', db_like($model_prefix) . '%', 'LIKE')
        ->execute()->fetchAssoc();

        // If file data exists, update it with expiration date from vela.
        if ($product_file_data['fid']) {
          // Get the expiration data for the user and file in question.
          $user_file = uc_file_get_by_uid($account->uid, $product_file_data['fid']);
          // If the file expiration data exists and it does not match vela.
          if (
            (isset($user_file->expiration) && $user_file->expiration != $vela_expiration_timestamp)
            || (!isset($user_file->expiration))
          ) {
            // Update the ubercart expirations to match vela.
            uc_file_user_renew($product_file_data['fid'], $account, $product_file_data['pfid'], array('expiration' => $vela_expiration_timestamp), TRUE);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_uc_checkout_complete().
 */
function penton_vela_uc_checkout_complete($order, $account) {

  // Get the country from the billing checkout.
  $country = uc_get_country_data(array('country_id' => $order->billing_country));
  // This code should never hit as country should be required.
  // But just in case...
  if ($country === FALSE) {
    $country = array(0 => array('country_iso_code_2' => 'US'));
  }
  // Set the penton profile fields.
  $account->field_penton_profile['und'] = array();
  $account->field_penton_profile['und'][0] = array(
    'country' => $country[0]['country_iso_code_2'],
    'first_name' => $order->billing_first_name,
    'last_name' => $order->billing_last_name,
    'organisation_name' => $order->billing_company,
    'postal_code' => $order->billing_postal_code,
  );

  // Set the advantage customer id on the user.
  $account->data['advantage_cust_id'] = $_SESSION['vela_order_response']->BillToAdvantageCustomerId;

  /* Save the account with the new profile fields,
   * and the advantage customer id.
   */
  user_save($account);

  // Capture updated account information be Eloqua.
  if (module_exists('penton_eloqua_api')) {
    penton_eloqua_api_send_user_to_eloqua($account->uid);
  }

  // Cleanup the session.
  unset($_SESSION['vela_order_request']);
  unset($_SESSION['vela_order_response']);
}

/**
 * Implements hook_uc_order().
 *
 * @see penton_vela_process_products_for_vela()
 */
function penton_vela_uc_order($op, $order, $arg2) {
  switch ($op) {
    case "presave":
      penton_vela_create_order($order);
      break;
  }
}

/**
 * Formats the contents of a drupal order and creates an order in vela.
 */
function penton_vela_create_order(&$order) {
  global $user;

  // Add/remove/update taxes on order.
  // Assume that taxes have not been added to ubercart already.
  $tax_found_in_uc = FALSE;

  // If there are line items loop over them and look for taxes.
  if (is_array($order->line_items)) {
    foreach ($order->line_items as $i => $line) {
      if ($line['type'] == 'tax') {
        // Mark that we've found taxes.
        $tax_found_in_uc = TRUE;
        /* If taxes were found, check to see if there is still taxes
         * on the order.
         */
        if ($_SESSION['vela_order_response']->TaxAmount > 0) {
          // If there is still taxes, check to see if they've changed.
          if ($line['amount'] != $_SESSION['vela_order_response']->TaxAmount) {
            // If they've changed, update the tax amount.
            uc_order_update_line_item($line['line_item_id'], "Tax", $_SESSION['vela_order_response']->TaxAmount);
          }
        }
        /* If no taxes were found on the current order form vela but
         * taxes were found in ubercart, remove them.
         */
        else {
          uc_order_delete_line_item($line['line_item_id']);
          unset($order->line_items[$i]);
        }
      }
    }
    /* If taxes were not found in ubercart, but were returned from
     * vela, add them.
     */
    if (!$tax_found_in_uc && $_SESSION['vela_order_response']->TaxAmount > 0) {
      $order->line_items[] = uc_order_line_item_add($order->order_id, 'tax', 'Tax', $_SESSION['vela_order_response']->TaxAmount);
    }
  }
}

/**
 * Implements hook_uc_cart_alter().
 */
function penton_vela_uc_cart_alter(&$items) {
  $vela_estimate_request = new stdClass();
  $vela_estimate_request->LineItems = penton_vela_process_products_for_vela($items);
  // Send the create order api request.
  $api_key = variable_get('penton_vela_api_key');
  $response = drupal_http_request(
    PENTON_VELA_GATEWAY_URL . $api_key . '/orders/estimate',
    array(
      'method' => 'POST',
      'data' => json_encode($vela_estimate_request),
      'headers' => array('Content-Type' => 'application/json', 'Accept' => 'application/json'),
    )
  );
  $vela_estimate_response = json_decode($response->data);

  foreach ($items as $uc_item) {
    list($uc_item_number, $uc_rate_code, $uc_service_period) = explode(":", $uc_item->model);
    foreach ($vela_estimate_response->LineItems as $vela_item) {
      if ($uc_item_number == $vela_item->ItemNumber) {
        $uc_item->price = $vela_item->Price;
      }
    }
  }
}

/**
 * Implements hook_uc_line_item().
 *
 * @see penton_vela_get_tax()
 */
function penton_vela_uc_line_item() {
  $items['tax'] = array(
    'title' => t('Tax'),
    'weight' => 9,
    'stored' => TRUE,
    'default' => FALSE,
    'calculated' => TRUE,
    'display_only' => FALSE,
  );
  return $items;
}

/**
 * Implements hook_uc_payment_gateway().
 *
 * @see penton_vela_charge()
 * @see penton_vela_settings()
 */
function penton_vela_uc_payment_gateway() {
  $gateways['penton_vela'] = array(
    'title' => t('Vela Gateway'),
    'description' => t('Process credit card payments through the Vela Gateway.'),
    'credit' => 'penton_vela_charge',
    'settings' => 'penton_vela_settings',
  );

  return $gateways;
}

/**
 * Implements hook_uc_shipping_method().
 *
 * @see penton_vela_quote()
 * @see penton_vela_service_list()
 */
function penton_vela_uc_shipping_method() {
  $methods = array();
  $method_id = penton_vela;
  $methods[$method_id] = array(
    "id" => $method_id,
    "module" => "penton_vela",
    "title" => 'Vela Shipping Options',
    "quote" => array(
      "type" => "order",
      "callback" => "penton_vela_quote",
      "accessorials" => penton_vela_service_list(),
    ),
    "enabled" => TRUE,
  );
  return $methods;
}


/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

/**
 * Sets up a list of shipping quotes based on what vela returns.
 *
 * @see penton_vela_uc_shipping_method()
 */
function penton_vela_quote($products, $detail, $method) {
  $quotes = array();
  if (isset($_SESSION['vela_order_response'])) {
    foreach ($_SESSION['vela_order_response']->ShippingOptions as $shipping_option) {
      $quotes[$shipping_option->ShippingCode] = array(
        'rate' => $shipping_option->Amount,
        'label' => 'asdf',
        'option_label' => "<b>" . check_plain($shipping_option->Description) . "</b><br>" . check_plain($shipping_option->EstimatedDeliveryDate),
      );
    }
  }

  return $quotes;
}

/**
 * Sets up settings form under vela payment gateway for credit card clearing.
 *
 * @see penton_vela_uc_payment_gateway()
 */
function penton_vela_settings() {
  $form['penton_vela_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Vela API Key'),
    '#description' => t('Your Vela API Key'),
    '#default_value' => variable_get('penton_vela_api_key'),
  );
  $form['penton_vela_gateway'] = array(
    '#type' => 'select',
    '#title' => t('Vela Gateway URL'),
    '#description' => t('Development or Production Vela Gateway'),
    '#options' => array(
      0 => t('Production'),
      1 => t('Development'),
    ),
    '#default_value' => [variable_get('penton_vela_gateway')],
  );
  return $form;
}

/**
 * Callback function to perform the charge operation.
 *
 * @see penton_vela_uc_payment_gateway()
 */
function penton_vela_charge($order_id, $amount, $data) {
  global $user;

  $order = uc_order_load($order_id);
  $confirm_order_request = new stdClass();
  $confirm_order_request->AdvantageOrderId = $_SESSION['vela_order_response']->AdvantageOrderId;
  $confirm_order_request->SourceSystemName = variable_get('site_name');
  $confirm_order_request->SourceSystemOrderKey = $order_id;
  $confirm_order_request->NetOrderTotal = $amount;
  $confirm_order_request->ShippedOrderTotal = $amount;
  $confirm_order_request->CardNumber = $order->payment_details['cc_number'];
  $card_type = '';
  if ($order->payment_details['cc_type'] == 'Visa') {
    $card_type = 'VI';
  }
  elseif ($order->payment_details['cc_type'] == 'Mastercard') {
    $card_type = 'MC';
  }
  elseif ($order->payment_details['cc_type'] == 'Discover') {
    $card_type = 'DI';
  }
  elseif ($order->payment_details['cc_type'] == 'American Express') {
    $card_type = 'AM';
  }
  $confirm_order_request->CardType = $card_type;
  $confirm_order_request->NameOnCard = $order->billing_first_name . " " . $order->billing_last_name;
  $confirm_order_request->ExpirationMonth = $order->payment_details['cc_exp_month'];
  $year = $order->payment_details['cc_exp_year'];
  if ($year < 100) {
    $year = $year + 2000;
  }
  $confirm_order_request->ExpirationYear = $year;
  $confirm_order_request->CardVerificationNumber = $order->payment_details['cc_cvv'];
  $confirm_order_request->AmountPaid = $amount;

  $api_key = variable_get('penton_vela_api_key');
  $response = drupal_http_request(
    PENTON_VELA_GATEWAY_URL . $api_key . '/orders/' . $_SESSION['vela_order_response']->AdvantageOrderId,
    array(
      'method' => 'PUT',
      'data' => json_encode($confirm_order_request),
      'headers' => array('Content-Type' => 'application/json', 'Accept' => 'application/json'),
    )
  );
  $response_data = json_decode($response->data);

  $message = "";
  foreach ($reponse_data->FriendlyMessages as $friendly_message) {
    $message .= $friendly_message . "<br>\n";
  }

  $error_messages = "";
  if (!$response_data->WasSuccessful) {
    foreach ($response_data->Errors as $error) {
      $error_messages .= $error->Message . "<br>\n";
    }
  }
  else {
    $_SESSION['penton_adobe_dtm_vela']['transaction_id'] = $response_data->TransactionId;
    $_SESSION['penton_adobe_dtm_vela']['source_order_id'] = $response_data->SourceSystemOrderKey;
    $_SESSION['penton_adobe_dtm_vela']['charged'] = $response_data->AmountCharged;
    $_SESSION['penton_adobe_dtm_vela']['base_price'] = $_SESSION['vela_order_response']->NetOrderTotal;
    $_SESSION['penton_adobe_dtm_vela']['shipping'] = $_SESSION['vela_order_response']->Shipping;
    $_SESSION['penton_adobe_dtm_vela']['tax_amount'] = $_SESSION['vela_order_response']->TaxAmount;
  }

  $result = array(
    'success' => $response_data->WasSuccessful,
    'message' => $error_messages . $message,
    'uid' => $user->uid,
  );
  return $result;
}

/**
 * Converts list of products for ubercart to a list of products for vela.
 *
 * @see penton_vela_uc_order()
 */
function penton_vela_process_products_for_vela($products) {
  $line_items = array();
  foreach ($products as $product) {
    $line_items[] = $vela_product = new stdClass();
    list($vela_product->ItemNumber, $vela_product->RateCode, $vela_product->ServicePeriod) = explode(":", $product->model);
    $vela_product->Quantity = $product->qty;
  }
  return $line_items;
}

/**
 * Sync pricing and stock of all products with what's in vela.
 */
function penton_vela_update_products() {
  // Load all products.
  $products = node_load_multiple(array(), array('type' => "product"));

  foreach ($products as $product) {
    $result = penton_vela_update_product($product);
    if ($result === TRUE) {
      node_save($product);
    }
  }
}

/**
 * Sync pricing and stock of a single product with what's in vela.
 */
function penton_vela_update_product(&$product) {
  // Pull product details from vela.
  $vela_product = penton_vela_get_product_from_vela($product->model);
  // If vela returns a product for the product model.
  if (count($vela_product->Errors) == 0) {
    // Update pricing.
    if ((int) $product->list_price == 0 || $product->list_price == $product->sell_price) {
      $product->list_price = $vela_product->Price;
    }
    // TODO See if we can determine sell price separately from list price.
    $product->sell_price = $vela_product->Price;

    // If the product is physical.
    if ($vela_product->Format == "Physical") {
      /* Set it to track stock, and track updat the current stock levels
      * from vela.
      */
      $stock_available = $vela_product->InventoryInfo->QuantityAvailable;
      // Ubercart's stock max is smaller than Vela's.
      // Cap stock level at 9999.
      if ($stock_available > 9999) {
        $stock_available = 9999;
      }

      $product->shippable = 1;
      if (isset($product->nid)) {
        db_merge('uc_product_stock')
          ->key(array('sku' => $product->model))
          ->updateFields(array(
            'active' => 1,
            'stock' => $stock_available,
            'threshold' => 0,
          ))
          ->insertFields(array(
            'sku' => $product->model,
            'active' => 1,
            'stock' => $stock_available,
            'threshold' => 0,
            'nid' => $product->nid,
          ))
          ->execute();
      }
    }
    else {
      // Otherwise set stock to 0 and set it to not track stock.
      db_update("{uc_product_stock}")
        ->fields(array('active' => 0, 'stock' => 0))
        ->condition('sku', $product->model, '=')
        ->execute();
      $product->shippable = 0;
    }

    if (isset($product->attributes) && is_array($product->attributes)) {
      // Setup any alternate skus.
      $alt_skus = array();
      // Get alternate skus from db.
      $alt_skus_result = db_select("{uc_product_adjustments}", "prod_adj")
        ->fields("prod_adj", array('combination', 'model'))
        ->condition('nid', $product->nid, '=')
        ->execute();

      // Loop over results.
      while ($alt_skus_record = $alt_skus_result->fetchAssoc()) {
        // The option id is stored serialized in the combination field.
        // The alternate sku is stored in the model field.
        // Build an associative array of oids=>alt_model.
        $alt_skus[array_pop(unserialize($alt_skus_record['combination']))] = $alt_skus_record['model'];
      }

      foreach ($product->attributes as $attribute) {
        foreach ($attribute->options as $option) {
          // Get product data from vela.
          if (isset($alt_skus[$option->oid])) {
            $alt_vela_prod = penton_vela_get_product_from_vela($alt_skus[$option->oid]);
            // Set the price adjustment for the option.
            $price_adjustment = $alt_vela_prod->Price - $product->price . "";
            // Update the db.
            db_update("{uc_product_options}")
              ->fields(array('price' => $price_adjustment))
              ->condition('nid', $product->nid, '=')
              ->condition('oid', $option->oid, '=')
              ->execute();
          }
        }
      }
    }
    // Product found in vela and synced, return true.
    return TRUE;
  }
  else {
    // Product not found in vela, return error message.
    foreach ($vela_product->Errors as $error) {
      $error_message .= $error->Message;
    }
    return $error_message;
  }
}

/**
 * Get the data for a product from vela.
 */
function penton_vela_get_product_from_vela($model_number) {
  list($item_number, $rate_code, $service_period) = explode(":", $model_number);

  // Get the api key.
  $api_key = variable_get('penton_vela_api_key');

  $query_string = "?itemnumber=" . $item_number . "&ratecode=" . $rate_code . "&serviceperiod=" . $service_period;

  $response = drupal_http_request(
    PENTON_VELA_GATEWAY_URL . $api_key . "/products" . $query_string,
    array(
      'method' => 'GET',
      'data' => "",
      'headers' => array('Content-Type' => 'application/json', 'Accept' => 'application/json'),
    )
  );
  // Parse the response.
  return json_decode($response->data);
}

/**
 * Implements hook_cronapi().
 *
 * This hook is provided by Elysia Cron.
 *
 * @see sites/all/modules/contrib/elysia_cron/API.txt
 */
function penton_vela_cronapi($op, $job = NULL) {
  // Every hour. TODO: Change this to hour!
  $items['update_products'] = array(
    'description' => 'Update Pricing',
    'rule' => '* */1 * * *',
    'callback' => 'penton_vela_update_products',
  );

  return $items;
}

/**
 * Dynamically build shipping options array from results in vela.
 */
function penton_vela_service_list() {
  $shipping_options = array();
  if (isset($_SESSION['vela_order_response']->ShippingOptions) && is_array($_SESSION['vela_order_response']->ShippingOptions)) {
    foreach ($_SESSION['vela_order_response']->ShippingOptions as $shipping_option) {
      $shipping_options[$shipping_option->ShippingCode] = $shipping_option->Description;
    }
  }
  return $shipping_options;
}

/**
 * Determine if a product has downloadable files attached to it.
 */
function penton_vela_product_has_downloads($model) {
  // Get product role data from db.
  $files = db_select("{uc_file_products}", "files")
    ->fields("files", array('fid'))
    ->condition('model', $model, '=')
    ->execute()->fetchAll();

  return count($files) > 0;
}
