<?php

/**
 * @file
 * Manages Adobe DTM analytics.
 */

/**
 * Implements hook_help().
 */
function penton_adobe_dtm_help($path, $arg) {
  switch ($path) {
    case 'admin/help#penton_adobe_dtm':
      return t("Settings for Adobe DTM analytics.");
  }
}

/**
 * Implements hook_permission().
 */
function penton_adobe_dtm_permission() {
  return array(
    'administer Adobe DTM configuration' => array(
      'title' => t('Administer Adobe DTM configuration'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function penton_adobe_dtm_menu() {
  $items = array();

  $items['admin/config/system/penton_adobe_dtm'] = array(
    'title' => 'Adobe DTM',
    'description' => 'Configure the settings used to integrate Adobe DTM analytics',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('penton_adobe_dtm_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer Adobe DTM configuration'),
    'file' => 'penton_adobe_dtm.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_page_build().
 *
 * Inserts script tags.
 */
function penton_adobe_dtm_page_build(&$page) {
  global $user;

  $script_path = trim(variable_get('adobe_dtm_script_path', ''));
  if (empty($script_path)) {
    $script_path = _penton_adobe_dtm_build_js_path();
  }

  // Check if we should track the currently active user's role.
  $track = 0;
  if (is_array($user->roles)) {
    foreach ($user->roles as $role) {
      $role = str_replace(' ', '_', $role);
      $track += variable_get("adobe_dtm_track_{$role}", FALSE);
    }
  }
  $tracking_type = variable_get('adobe_dtm_role_tracking_type', 'inclusive');
  $track = $tracking_type == 'inclusive' ? $track > 0 : $track <= 0;

  // Don't track page views in the admin sections, or for certain roles.
  if (!empty($script_path) && !path_is_admin(current_path()) && $track) {
    // Add main script to <head>.
    drupal_add_js($script_path, array(
      'type' => 'external',
      'scope' => 'header',
      'preprocess' => FALSE,
      // Note: this is the lowest-weighted group,
      // helping sort it before others.
      'group' => JS_LIBRARY,
    ));

    $penton_adobe_dtm_events = array();

    // Merge variables here.
    $variables = array_merge(
      _penton_adobe_dtm_get_session_vars(),
      _penton_adobe_dtm_get_user_attributes(),
      _penton_adobe_dtm_get_content_attributes()
    );

    // Merge digital data variables here.
    $digital_data_variables = array_merge(
      _penton_adobe_dtm_get_digital_session_vars(),
      _penton_adobe_dtm_get_digital_data_user_attributes(),
      _penton_adobe_dtm_get_digital_data_content_attributes()
    );
    if (module_exists('penton_vela')) {
      $digital_data_variables = array_merge(
        $digital_data_variables,
        _penton_adobe_dtm_get_digital_data_ecommerce_attributes()
      );
      $penton_adobe_dtm_events = array_merge(
        $penton_adobe_dtm_events,
        _penton_adobe_dtm_get_digital_data_ecommerce_events()
      );
    }
    drupal_add_js(array('penton_adobe_dtm' => $digital_data_variables), array('type' => 'setting'));
    drupal_add_js(array('penton_adobe_dtm_events' => $penton_adobe_dtm_events), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'penton_adobe_dtm') . '/js/penton_adobe_dtm.js', array(
      'type' => 'file',
      'scope' => 'footer',
      'group' => JS_THEME,
    ));

    // Set Adobe DTM variables in JS.
    $script = "\n";
    foreach ($variables as $name => $value) {
      $script .= "_satellite.setVar('{$name}', '{$value}');\n";
    }
    $script .= "_satellite.pageBottom();\n";

    // Add end-of-page snippet.
    drupal_add_js($script, array(
      'type' => 'inline',
      'scope' => 'footer',
      'preprocess' => FALSE,
      // Note: this is the highest-weighted group,
      // helping sort it after others.
      'group' => JS_THEME,
    ));
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Make our js_alter implementation below happen last (out of all modules'
 * implementations), to give us maximum control over setting the weights of
 * analytic scripts.
 * NOTE: themes may implement these alter hooks too; those are outside the
 * control of this hook, and so will always happen afterward.
 */
function penton_adobe_dtm_module_implements_alter(&$impl, $hook) {
  if ($hook == 'js_alter') {
    $group = $impl['penton_adobe_dtm'];
    unset($impl['penton_adobe_dtm']);
    $impl['penton_adobe_dtm'] = $group;
  }
}

/**
 * Implements hook_js_alter().
 *
 * Attempts to place main script first in <head>
 *
 * Attempts to place inline snippet _satellite.pageBottom()
 * and variables just before </body>.
 */
function penton_adobe_dtm_js_alter(&$js) {
  // This hook runs before sorting, so all we can do is ensure desired weights.
  $adobe_dtm_main_key = '';
  $adobe_dtm_footer_key = '';
  $lowest_weight = NULL;
  $highest_weight = NULL;

  foreach ($js as $key => $info) {
    if (strpos($key, 'assets.adobedtm.com') !== FALSE) {
      $adobe_dtm_main_key = $key;
    }
    elseif ($info['type'] == 'inline' && strpos($info['data'], '_satellite.pageBottom();') !== FALSE) {
      $adobe_dtm_footer_key = $key;
    }

    if (is_null($lowest_weight)) {
      $lowest_weight = $info['weight'];
    }
    elseif ($info['weight'] < $lowest_weight) {
      $lowest_weight = $info['weight'];
    }

    if (is_null($highest_weight)) {
      $highest_weight = $info['weight'];
    }
    elseif ($info['weight'] > $highest_weight) {
      $highest_weight = $info['weight'];
    }
  }

  if (!empty($adobe_dtm_main_key)) {
    $js[$adobe_dtm_main_key]['weight'] = $lowest_weight - 100;
  }

  if (!empty($adobe_dtm_footer_key)) {
    $js[$adobe_dtm_footer_key]['weight'] = $highest_weight + 100;
  }
}

/**
 * Implements hook_user_update().
 *
 * Saves variables if user upgrades their level of access.
 */
function penton_adobe_dtm_user_update(&$edit, $account, $category) {
  if (FALSE !== ($level = _penton_adobe_dtm_permission_level_upgraded($account))) {
    $_SESSION['adobe_dtm_session_vars']['dtm_user_id'] = $account->uid;
    $_SESSION['adobe_dtm_session_vars']['dtm_reg_type'] = $level;
    $_SESSION['adobe_dtm_session_vars']['dtm_event'] = 'upgrade';
    $_SESSION['adobe_dtm_session_digital_vars']['event']['regType'] = $level;
    $_SESSION['adobe_dtm_session_digital_vars']['event']['eventName'] = 'upgrade';
  }
}

/**
 * Implements hook_user_login().
 *
 * Sets cookie with user's ID to check for logged_out status.
 */
function penton_adobe_dtm_user_login(&$edit, $account) {
  // Set cookie for 365 days.
  user_cookie_save(array('uid' => $account->uid));
}

/**
 * Returns Adobe DTM session variables and unset them from $_SESSION array.
 */
function _penton_adobe_dtm_get_session_vars() {
  if (!empty($_SESSION['adobe_dtm_session_vars'])) {
    $vars = $_SESSION['adobe_dtm_session_vars'];
    unset($_SESSION['adobe_dtm_session_vars']);
    return $vars;
  }
  return array();
}

/**
 * Returns session attributes for digital data layer.
 */
function _penton_adobe_dtm_get_digital_session_vars() {
  if (!empty($_SESSION['adobe_dtm_session_digital_vars'])) {
    $vars = $_SESSION['adobe_dtm_session_digital_vars'];
    $vars = array(
      'event' => array(
        array(
          'eventName' => $vars['event']['eventName'],
          'attributes' => array(
            'regType' => $vars['event']['regType'],
            'commentID' => '',
          ),
        ),
      ),
    );
    unset($_SESSION['adobe_dtm_session_digital_vars']);
    return $vars;
  }
  return array();
}

/**
 * Build complete path to Adobe DTM Javascript file.
 *
 * @param string $adobe_dtm_id
 *   Adobe DTM ID (serial number).
 * @param string $adobe_dtm_site_hash
 *   Adobe DTM site hash.
 * @param string $adobe_dtm_environment
 *   Current server environment. Possible values: staging or production.
 *
 * @return string
 *   Complete path to Adobe DTM javascript file.
 */
function _penton_adobe_dtm_build_js_path($adobe_dtm_id = NULL, $adobe_dtm_site_hash = NULL, $adobe_dtm_environment = NULL) {
  if (is_null($adobe_dtm_id)) {
    $adobe_dtm_id = variable_get('adobe_dtm_id', '');
  }
  if (is_null($adobe_dtm_site_hash)) {
    $adobe_dtm_site_hash = variable_get('adobe_dtm_site_hash', '');
  }
  if (is_null($adobe_dtm_environment)) {
    $adobe_dtm_environment = variable_get('adobe_dtm_environment', 'staging');
  }

  $script_path = '';
  if (!empty($adobe_dtm_id) && !empty($adobe_dtm_site_hash)) {
    $adobe_dtm_environment = $adobe_dtm_environment == 'staging' ? '-staging' : '';
    $script_path = '//assets.adobedtm.com/' . $adobe_dtm_id
      . '/satelliteLib-' . $adobe_dtm_site_hash
      . $adobe_dtm_environment . '.js';
  }
  return $script_path;
}

/**
 * Returns user's permission level depending on their roles.
 *
 * @param object $account
 *   User object of which we need to know the level of access.
 *
 * @return string
 *   User's permission level.
 */
function _penton_adobe_dtm_get_user_permission_level($account) {
  if (user_has_role(PENTON_GATED_PAID_PREMIUM_RID, $account)) {
    return 'paid';
  }
  if (user_has_role(PENTON_GATED_ADVANCED_RID, $account)) {
    return 'advanced';
  }
  return 'basic';
}

/**
 * Check if user has upgraded their level of access.
 *
 * @param object $account
 *   User object of which we need to know new level of access.
 *
 * @return string|bool
 *   New permission level or FALSE if level of access has not been upgraded.
 */
function _penton_adobe_dtm_permission_level_upgraded($account) {
  if (isset($account->original)) {
    // Check if user upgraded their level to "paid".
    if (!user_has_role(PENTON_GATED_PAID_PREMIUM_RID, $account->original) &&
      user_has_role(PENTON_GATED_PAID_PREMIUM_RID, $account)) {
      return 'paid';
    }
    // Check if user upgraded level their to "advanced".
    if (!user_has_role(PENTON_GATED_ADVANCED_RID, $account->original) &&
      user_has_role(PENTON_GATED_ADVANCED_RID, $account)) {
      return 'advanced';
    }
  }
  return FALSE;
}

/**
 * Returns user attributes so that Adobe DTM can read them for analysis.
 *
 * @param object $account
 *   User object of which we need to get attributes.
 *
 * @return array
 *   User attributes for Adobe DTM analysis.
 */
function _penton_adobe_dtm_get_user_attributes($account = NULL) {
  if (is_null($account)) {
    $account = $GLOBALS['user'];
  }

  $variables = array();
  if ($account->uid) {
    $variables['dtm_user_id'] = $account->uid;
    $variables['dtm_login_status'] = 'logged_in';
    $variables['dtm_user_permission'] = _penton_adobe_dtm_get_user_permission_level($account) . '|';
    $variables['dtm_user_permission'] .= user_has_role(PENTON_USER_UNVERIFIED_RID, $account) ? 'unverified' : 'verified';
  }
  else {
    $variables['dtm_user_id'] = 'null';
    if (isset($_COOKIE['Drupal_visitor_uid']) && $_COOKIE['Drupal_visitor_uid'] > 0) {
      $variables['dtm_login_status'] = 'logged_out';
    }
    else {
      $variables['dtm_login_status'] = 'unreg';
    }
    $variables['dtm_user_permission'] = 'anonymous';
  }
  return $variables;
}

/**
 * Returns user attributes for digital data layer.
 *
 * @param object $account
 *   User object of which we need to get attributes.
 *
 * @return array
 *   User attributes for Adobe DTM analysis.
 */
function _penton_adobe_dtm_get_digital_data_user_attributes($account = NULL) {
  if (is_null($account)) {
    global $user;
    $account = $user;
  }

  $variables = array();
  if (!empty($account->uid)) {
    $variables['profile']['profileInfo']['profileID'] = $account->uid;
    $variables['segment']['loginStatus'] = 'logged_in';
    $variables['segment']['permission'] = _penton_adobe_dtm_get_user_permission_level($account) . '|';
    $variables['segment']['permission'] .= user_has_role(PENTON_USER_UNVERIFIED_RID, $account) ? 'unverified' : 'verified';
  }
  else {
    $variables['profile']['profileInfo']['profileID'] = 'null';
    if (isset($_COOKIE['Drupal_visitor_uid']) && $_COOKIE['Drupal_visitor_uid'] > 0) {
      $variables['segment']['loginStatus'] = 'logged_out';
    }
    else {
      $variables['segment']['loginStatus'] = 'unreg';
    }
    $variables['segment']['permission'] = 'anonymous';
  }
  return array('user' => $variables);
}

/**
 * Returns content attributes so that Adobe DTM can read them for analysis.
 *
 * @param object $node
 *   Node object of which we need to get attributes.
 *
 * @return array
 *   Content attributes for Adobe DTM analysis.
 */
function _penton_adobe_dtm_get_content_attributes($node = NULL) {
  if (is_null($node)) {
    $node = menu_get_object();
  }

  $variables = array();
  // dtm_page_name should be passed on every page load.
  $variables['dtm_page_name'] = addslashes(drupal_get_title());
  if (empty($variables['dtm_page_name']) && arg(0) == 'node' && arg(1) && arg(2) == 'gallery') {
    $variables['dtm_page_name'] = $node->title;
  }
  if (!is_null($node)) {
    if ($node->type == 'display_admin') {
      $variables['dtm_page_name'] = 'Home Page';
    }
    $variables['dtm_content_type'] = $node->type;
    $variables['dtm_uuid'] = isset($node->uuid) ? $node->uuid : '';
    if ($node->type == 'article') {
      $variables['dtm_category'] = _penton_adobe_dtm_get_primary_category($node);
      $variables['dtm_author'] = implode('|', _penton_adobe_dtm_get_content_authors($node));
      $variables['dtm_taxonomy'] = implode('|', _penton_adobe_dtm_get_content_taxonomies($node));
      $variables['dtm_publish_date'] = _penton_adobe_dtm_get_publish_date($node);
      $variables['dtm_content_permission'] = _penton_adobe_dtm_get_content_permission($node);
      $variables['dtm_article_sub_type'] = _penton_adobe_dtm_get_article_subtype($node);
      $variables['dtm_gating_state'] = _penton_adobe_dtm_get_gating_state($node);
      $variables['dtm_programs'] = _penton_adobe_dtm_get_program($node);
      $variables['dtm_ext_content_type'] = _penton_adobe_dtm_get_ext_content_type($node);
      $variables['dtm_lazy_article_count'] = '10';
      $variables['dtm_article_position'] = '1_of_' . $variables['dtm_lazy_article_count'];
      $variables['dtm_content_goal'] = !empty($node->field_penton_content_team_goals[LANGUAGE_NONE][0]['value']) ? 'yes' : '';
    }
  }
  else {
    // We are not on the node page but still need dtm_content_type.
    if ($content_type = _penton_adobe_dtm_get_non_node_content_type()) {
      $variables['dtm_content_type'] = $content_type;
    }
  }
  return $variables;
}

/**
 * Returns content attributes for digital data layer.
 *
 * @param object $node
 *   Node object of which we need to get attributes.
 *
 * @return array
 *   Content attributes for Adobe DTM analysis.
 */
function _penton_adobe_dtm_get_digital_data_content_attributes($node = NULL) {
  if (is_null($node)) {
    $node = menu_get_object();
  }

  $variables = array();
  // dtm_page_name should be passed on every page load.
  $variables['pageInfo']['pageName'] = addslashes(drupal_get_title());
  if (empty($variables['pageInfo']['pageName']) && arg(0) == 'node' && arg(1) && arg(2) == 'gallery') {
    $variables['pageInfo']['pageName'] = $node->title;
  }
  $variables['destinationURL'] = !empty($_SERVER['HTTPS']) ? "https://" : "http://";
  $variables['destinationURL'] .= $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI'];
  if (!is_null($node)) {
    if ($node->type == 'display_admin') {
      $variables['pageInfo']['pageName'] = 'Home Page';
    }
    $variables['category']['pageType'] = $node->type != 'product' ?
      $node->type != 'store_front' ? $node->type : 'store_home' :
      'product_detail';
    $variables['pageInfo']['pageID'] = isset($node->uuid) ? $node->uuid : '';
    if ($node->type == 'article') {
      $variables['pageInfo']['author'] = implode('|', _penton_adobe_dtm_get_content_authors($node));
      $variables['pageInfo']['issueDate'] = date('M d, Y', strtotime($node->field_penton_published_datetime[LANGUAGE_NONE][0]['value']));
      $variables['category']['primaryCategory'] = _penton_adobe_dtm_get_primary_category($node);
      $variables['attributes']['taxonomy'] = implode('|', _penton_adobe_dtm_get_content_taxonomies($node));
      $variables['attributes']['permission'] = _penton_adobe_dtm_get_content_permission($node);
      $variables['attributes']['subType1'] = _penton_adobe_dtm_get_article_subtype($node);
      $variables['attributes']['subType2'] = _penton_adobe_dtm_get_ext_content_type($node);
      $variables['attributes']['visibility'] = _penton_adobe_dtm_get_gating_state($node);
      $variables['attributes']['programs'] = _penton_adobe_dtm_get_program($node);
      $variables['attributes']['scrollCount'] = '10';
      $variables['attributes']['scrollPosition'] = '1_of_' . $variables['attributes']['scrollCount'];
      $variables['attributes']['countsTowardGoal'] = !empty($node->field_penton_content_team_goals[LANGUAGE_NONE][0]['value']) ? 'yes' : '';
    }
  }
  else {
    // We are not on the node page but still need dtm_content_type.
    if ($content_type = _penton_adobe_dtm_get_non_node_content_type()) {
      $variables['category']['pageType'] = $content_type;
    }
  }
  return array('page' => $variables);
}

/**
 * Implements hook_uc_add_to_cart().
 */
function penton_adobe_dtm_uc_add_to_cart($nid, $qty, $data) {
  $cart = uc_cart_get_contents();
  if (empty($cart)) {
    $_SESSION['penton_adobe_dtm_vela_events'][] = 'SCOPEN';
  }
  $_SESSION['penton_adobe_dtm_vela_events'][] = 'SCADD';
}

/**
 * Implements hook_uc_cart_item_delete().
 */
function penton_adobe_dtm_uc_cart_item_delete($entity) {
  $_SESSION['penton_adobe_dtm_vela_events'][] = 'SCREMOVE';
}

/**
 * Returns array with ecommerce DTM rules to fire.
 */
function _penton_adobe_dtm_get_digital_data_ecommerce_events() {
  $events = array();

  if (!empty($_SESSION['penton_adobe_dtm_vela_events'])) {
    $events = $_SESSION['penton_adobe_dtm_vela_events'];
    unset($_SESSION['penton_adobe_dtm_vela_events']);
  }

  if (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
    $node = menu_get_object();
    if (!is_null($node) && $node->type == 'product') {
      $events[] = 'PRODVIEW';
    }
  }
  elseif (arg(0) == 'cart') {
    if (!arg(1)) {
      $events[] = 'SCVIEW';
    }
    elseif (arg(1) == 'checkout') {
      if (!arg(2)) {
        $events[] = 'SCCHECKOUT';
      }
      elseif (arg(2) == 'complete') {
        $events = array_filter($events, function ($var) {
          return $var != 'SCREMOVE';
        });
        $events[] = 'PURCHASE';
      }
    }
  }

  return $events;
}

/**
 * Returns ecommerce variables for digital data layer.
 */
function _penton_adobe_dtm_get_digital_data_ecommerce_attributes() {
  $node = menu_get_object();

  $variables = array();
  if (!is_null($node) && $node->type == 'product') {
    $variables['product'][] = _penton_atobe_dtm_get_product_attributes($node);
  }

  // Shopping cart details.
  $cart = uc_cart_get_contents();
  if (!empty($cart)) {
    $variables['cart']['price']['cartTotal'] = 0;
    foreach ($cart as $item) {
      $variables['cart']['cartID'] = $item->cart_id;
      $item_price = floatval($item->price);
      $item_qty = intval($item->qty);
      $variables['cart']['price']['cartTotal'] += $item_price * $item_qty;
      $product = node_load($item->nid);
      if (!empty($product_attributes = _penton_atobe_dtm_get_product_attributes($product))) {
        $variables['cart']['item'][] = $product_attributes;
      }
    }
  }

  // On purchase.
  if (!empty($_SESSION['penton_adobe_dtm_vela'])) {
    $transaction_id = $_SESSION['penton_adobe_dtm_vela']['transaction_id'];
    $order_id = $_SESSION['penton_adobe_dtm_vela']['source_order_id'];
    $charged = $_SESSION['penton_adobe_dtm_vela']['charged'];
    $base_price = $_SESSION['penton_adobe_dtm_vela']['base_price'];
    $shipping = $_SESSION['penton_adobe_dtm_vela']['shipping'];
    $tax_amount = $_SESSION['penton_adobe_dtm_vela']['tax_amount'];
    unset($_SESSION['penton_adobe_dtm_vela']);

    $order = uc_order_load($order_id);

    $variables['transaction'] = array(
      'transactionID' => $transaction_id,
      'total' => array(
        'basePrice' => $base_price,
        'currency' => $order->currency,
        'shipping' => $shipping,
        'priceWithTax' => $base_price + $tax_amount,
        'transactionTotal' => $charged,
      ),
    );
    foreach ($order->products as $item) {
      $product = node_load($item->nid);
      if (!empty($product_attributes = _penton_atobe_dtm_get_product_attributes($product))) {
        $variables['transaction']['item'][] = $product_attributes;
      }
    }
  }

  return $variables;
}

/**
 * Returns product's attributes.
 *
 * @param object $product
 *   Product object of which we need to get attributes.
 *
 * @return string
 *   Attributes of given product.
 */
function _penton_atobe_dtm_get_product_attributes($product = NULL) {
  if (is_null($product)) {
    $product = menu_get_object();
  }

  if (!is_null($product) && $product->type == 'product') {
    return array(
      'productInfo' => array(
        'productID' => $product->uuid,
        'productName' => $product->title,
      ),
      'category' => array(
        'productType' => _penton_atobe_dtm_get_product_product_type($product),
      ),
      'attributes' => array(
        'topicVocabulary' => _penton_atobe_dtm_get_product_product_topics($product),
      ),
    );
  }
  else {
    return array();
  }
}

/**
 * Returns product's Product Type.
 *
 * @param object $product
 *   Product object of which we need to get Product Type.
 *
 * @return string
 *   Product Type name of given product.
 */
function _penton_atobe_dtm_get_product_product_type($product) {
  $product_type = '';

  $w_product = entity_metadata_wrapper('node', $product);
  if (isset($w_product->field_product_type) && !empty($w_product->field_product_type->value())) {
    $product_type = $w_product->field_product_type->name->value();
  }

  return $product_type;
}

/**
 * Returns product's Topics.
 *
 * @param object $product
 *   Product object of which we need to get Topics.
 *
 * @return string
 *   Topics of given product, pipe delimited.
 */
function _penton_atobe_dtm_get_product_product_topics($product) {
  $topics = '';

  $w_product = entity_metadata_wrapper('node', $product);
  if (isset($w_product->field_topic)) {
    foreach ($w_product->field_topic->value() as $topic) {
      $topics .= $topic->name . '|';
    }
    $topics = rtrim($topics, '|');
  }

  return $topics;
}

/**
 * Returns content type when user is not on node page.
 */
function _penton_adobe_dtm_get_non_node_content_type() {
  if (arg(0) == 'taxonomy' && arg(1) && arg(1) == 'term' && arg(2) && is_numeric(arg(2))) {
    // We are on category or program page.
    $term = menu_get_object('taxonomy_term', 2);
    if (!empty($term->vocabulary_machine_name)) {
      switch ($term->vocabulary_machine_name) {
        case 'categories':
          return 'category';

        case 'program':
          return 'program';

        case 'product_types':
          return 'store_producttype';

        case 'topics':
          return 'store_topic';
      }
    }
  }
  elseif (arg(0) == 'author') {
    return 'author';
  }
  elseif (arg(0) == 'user' && arg(1) && is_numeric(arg(1)) && (arg(2) && arg(2) == 'preview' || !arg(2))) {
    // We are on user profile page.
    global $user;
    $account = user_load(arg(1));
    if ($account->uid == $user->uid) {
      return 'profile_personal';
    }
    elseif (user_has_role(PENTON_AUTHOR_RID, $account)) {
      return 'author';
    }
    else {
      return 'profile_other';
    }
  }
  elseif (arg(0) == 'search') {
    // We are on 'Search' page.
    return 'search_results';
  }
  elseif (arg(0) == 'cart') {
    if (!arg(1)) {
      // We are on cart page.
      return 'my_cart';
    }
    elseif (arg(1) == 'checkout') {
      if (!arg(2)) {
        // We are on checkout page.
        return 'billing_payment';
      }
      elseif (arg(2) == 'review') {
        // We are on review order page.
        return 'review_order';
      }
      elseif (arg(2) == 'complete') {
        return 'purchase';
      }
    }
  }
  elseif (arg(0) == 'user' && arg(1) && arg(1) == 'login' && !arg(2) && strpos($_GET['destination'], 'cart') === 0) {
    return 'register_login';
  }
  return '';
}

/**
 * Returns node's authors combined from authoring information and contributors.
 *
 * @param object $node
 *   Node object of which we need to get authors.
 *
 * @return array
 *   Array of authors' names.
 */
function _penton_adobe_dtm_get_content_authors($node) {
  $authors = array();

  if (!empty($node->name)) {
    $authors[] = $node->name;
  }
  if (isset($node->field_penton_author[LANGUAGE_NONE])) {
    foreach ($node->field_penton_author[LANGUAGE_NONE] as $author) {
      $author_name = _penton_adobe_dtm_get_author_name($author);
      if (!empty($author_name) && !in_array($author_name, $authors)) {
        $authors[] = $author_name;
      }
    }
  }

  return $authors;
}

/**
 * Returns name of the author.
 *
 * @param array $author
 *   Array from node object that contains uid or loaded user entity.
 *
 * @return string
 *   Author's name.
 */
function _penton_adobe_dtm_get_author_name($author) {
  $name = '';

  if (isset($author['entity'])) {
    $name = $author['entity']->name;
  }
  elseif (isset($author['target_id'])) {
    $user = user_load($author['target_id']);
    if ($user !== FALSE) {
      $name = $user->name;
    }
  }

  return $name;
}

/**
 * Returns publish date of given node.
 *
 * @param object $node
 *   Node object of which we need to get publish date.
 *
 * @return string
 *   Author's name.
 */
function _penton_adobe_dtm_get_publish_date($node) {
  $date = '';

  if (!empty($node->field_penton_published_datetime)) {
    $date = date('M d, Y', strtotime($node->field_penton_published_datetime[LANGUAGE_NONE][0]['value']));
  }

  return $date;
}

/**
 * Returns primary category of given node.
 *
 * @param object $node
 *   Node object of which we need to get primary category.
 *
 * @return string
 *   Primary category.
 */
function _penton_adobe_dtm_get_primary_category($node) {
  $primary = '';
  if (!empty($node->field_penton_primary_category)) {
    $primary = _penton_adobe_dtm_get_taxonomy_name($node->field_penton_primary_category[LANGUAGE_NONE][0]);
  }
  return $primary;
}

/**
 * Returns node's categories combined from primary and secondary categories.
 *
 * @param object $node
 *   Node object of which we need to get taxonomies.
 *
 * @return array
 *   Array of node's categories.
 */
function _penton_adobe_dtm_get_content_taxonomies($node) {
  $taxonomies = array();

  if (!empty($node->field_penton_primary_category)) {
    $taxonomies[] = _penton_adobe_dtm_get_taxonomy_name($node->field_penton_primary_category[LANGUAGE_NONE][0]);
  }
  if (isset($node->field_penton_secondary_category[LANGUAGE_NONE])) {
    foreach ($node->field_penton_secondary_category[LANGUAGE_NONE] as $secondary) {
      $term_name = _penton_adobe_dtm_get_taxonomy_name($secondary);
      if (!empty($term_name) && !in_array($term_name, $taxonomies)) {
        $taxonomies[] = $term_name;
      }
    }
  }

  return $taxonomies;
}

/**
 * Returns article's subtype.
 *
 * @param object $node
 *   Node object of which we need to get subtype.
 *
 * @return string
 *   Article's subtype.
 */
function _penton_adobe_dtm_get_article_subtype($node) {
  $subtype = '';
  if (isset($node->field_penton_article_type[LANGUAGE_NONE][0])) {
    $subtype = _penton_adobe_dtm_get_taxonomy_name($node->field_penton_article_type[LANGUAGE_NONE][0]);
  }
  return $subtype;
}

/**
 * Returns article's external content type.
 *
 * @param object $node
 *   Node object of which we need to get external content type.
 *
 * @return string
 *   Article's external content type.
 */
function _penton_adobe_dtm_get_ext_content_type($node) {
  $ext_content_type = '';
  if (!empty($node->field_penton_native_advertising) && $node->field_penton_native_advertising[LANGUAGE_NONE][0]['value']) {
    $ext_content_type = 'native content';
  }
  if (!empty($node->field_penton_aggregated_content) && $node->field_penton_aggregated_content[LANGUAGE_NONE][0]['value']) {
    $ext_content_type = 'aggregated';
  }
  if (!empty($node->field_penton_press_release_flag) && $node->field_penton_press_release_flag[LANGUAGE_NONE][0]['value']) {
    $ext_content_type = 'press release';
  }
  return $ext_content_type;
}

/**
 * Returns article's Penton Program name.
 *
 * @param object $node
 *   Node object of which we need to get Program name.
 *
 * @return string
 *   Penton Program name.
 */
function _penton_adobe_dtm_get_program($node) {
  $program = '';
  if (isset($node->field_penton_program[LANGUAGE_NONE][0])) {
    $program = _penton_adobe_dtm_get_taxonomy_name($node->field_penton_program[LANGUAGE_NONE][0]);
  }
  return $program;
}

/**
 * Returns name the taxonomy term.
 *
 * @param array $taxonomy
 *   Array from node object that contains tid or loaded taxonomy term.
 *
 * @return string
 *   Taxonomy name.
 */
function _penton_adobe_dtm_get_taxonomy_name($taxonomy) {
  $name = '';

  if (isset($taxonomy['taxonomy_term'])) {
    $name = $taxonomy['taxonomy_term']->name;
  }
  elseif (isset($taxonomy['tid'])) {
    $term = taxonomy_term_load($taxonomy['tid']);
    if ($term !== FALSE) {
      $name = $term->name;
    }
  }

  return $name;
}

/**
 * Returns content permission level of given node based on Privacy Settings.
 *
 * @param object $node
 *   Node object of which we need to know permission level.
 *
 * @return string
 *   Permission level.
 */
function _penton_adobe_dtm_get_content_permission($node) {
  $levels = array(
    DRUPAL_ANONYMOUS_RID => 'public',
    DRUPAL_AUTHENTICATED_RID => 'basic',
    PENTON_GATED_ADVANCED_RID => 'advanced',
    PENTON_GATED_PAID_PREMIUM_RID => 'paid',
  );
  $level = _penton_gated_get_level($node);
  return $levels[$level];
}

/**
 * Returns gating state of the content that is being viewed by the current user.
 *
 * @param object $node
 *   Node object of which we need to know gating state.
 *
 * @return string
 *   Gating state based on user's roles.
 */
function _penton_adobe_dtm_get_gating_state($node) {
  global $user;

  $level = _penton_gated_get_level($node);
  switch ($level) {
    case DRUPAL_ANONYMOUS_RID:
      // Anonymous.
      return 'visible';

    case DRUPAL_AUTHENTICATED_RID:
      // Authenticated.
      return user_has_role(DRUPAL_AUTHENTICATED_RID, $user) ? 'visible' : 'gated';

    case PENTON_GATED_ADVANCED_RID:
      // Advanced.
      $has_access = user_has_role(PENTON_GATED_ADVANCED_RID, $user) || user_has_role(PENTON_GATED_PAID_PREMIUM_RID, $user);
      return $has_access ? 'visible' : 'gated';

    case PENTON_GATED_PAID_PREMIUM_RID:
      // Paid premium.
      return user_has_role(PENTON_GATED_PAID_PREMIUM_RID, $user) ? 'visible' : 'gated';
  }
  return 'visible';
}
