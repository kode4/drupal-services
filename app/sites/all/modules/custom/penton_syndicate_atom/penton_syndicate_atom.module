<?php

/**
 * @file
 * Penton syndicate atom module.
 */

module_load_include('inc', 'penton_syndicate_atom', 'penton_syndicate_atom_xml');

/**
 * Implements hook_menu().
 */
function penton_syndicate_atom_menu() {
  $items = array();
  $items['syndicate_atom'] = array(
    'title' => 'Syndication via Atom',
    'page callback' => 'penton_syndicate_atom_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Callback function.
 */
function penton_syndicate_atom_page() {

  $qs = array();
  if (isset($_GET['page'])) {
    $qs['page'] = $_GET['page'];
  }
  if (isset($_GET['limit'])) {
    $qs['limit'] = $_GET['limit'];
    $limit = (int) $_GET['limit'];
  }
  else {
    $limit = 100;
  }
  $path = isset($_GET['q']) ? $_GET['q'] : NULL;

  $url = check_url(url($path, array('absolute' => TRUE, 'query' => $qs)));
  $feed_id = check_url(url($path, array('absolute' => TRUE)));
  $site_name = variable_get('site_name', 'Atom Feed');
  $query = penton_syndicate_atom_query();
  $query->addExpression('COUNT(n.nid)', 'count');
  $count_result = $query->execute();
  $all_nodes = $count_result->fetchField();
  unset($query);

  $page = pager_default_initialize($all_nodes, $limit);
  $offset = $limit * $page;
  $query = penton_syndicate_atom_query();
  $query->fields('n', array('nid'));
  $query->orderBy('n.created', 'DESC');
  $query->range($offset, $limit);
  $query_range = $query->execute();
  $nodes = $query_range->fetchCol();
  $pager_args = array('path' => $path, 'limit' => $limit);
  $pager = penton_syndicate_atom_pager($pager_args);
  $entries = array();
  foreach ($nodes as $nid) {
    $entries[] = penton_syndicate_atom_entry($nid);
  }

  $changed = db_select('node', 'n');
  $changed->fields('n', array('changed'));
  $changed->orderBy('changed', 'DESC');
  $changed->range(0, 1);
  $result = $changed->execute();
  $updated_timestamp = $result->fetchField();
  if ($updated_timestamp) {
    $updated = gmstrftime('%Y-%m-%dT%H:%M:%SZ', $updated_timestamp);
  }
  else {
    $updated = FALSE;
  }

  $feed = penton_syndicate_atom_feed($entries, $pager, $url, $feed_id, $updated, $site_name);

  drupal_add_http_header("Content-Type", "application/atom+xml");
  drupal_add_http_header("charset", "utf-8");
  print $feed;
}

/**
 * Penton syndicate basic select query.
 *
 * @return \SelectQuery
 *   Returns db_select query.
 */
function penton_syndicate_atom_query() {
  $article_term = taxonomy_get_term_by_name('Article', 'article_type');
  $tid = array_pop($article_term)->tid;
  $query = db_select('node', 'n');
  $query->condition('n.status', 1);
  $query->join('field_data_field_penton_syndicate_atom', 'a', 'a.entity_id = n.nid');
  $query->join('taxonomy_index', 't', 't.nid = n.nid');
  $query->condition('a.field_penton_syndicate_atom_value', 1);
  $query->condition('t.tid', $tid);

  return $query;
}

/**
 * Composes atom+xml page content.
 * 
 * @param array $entries
 *   An array of syndicate atom entries.
 * 
 * @param array $pager
 *   List of the pager links.
 * 
 * @param string $link
 *   Self url.
 * 
 * @param string $feed_id
 *   Feed id url.
 *   
 * @param string $updated
 *   Updated time value.
 * 
 * @param string $site_name
 *   Site name.
 * 
 * @return string
 *   Returns page content.
 */
function penton_syndicate_atom_feed($entries, $pager, $link, $feed_id, $updated, $site_name) {
  $feed = new PentonAtomXmlFeed();
  $feed->addTitle($site_name);
  $feed->addId($feed_id);
  $feed->addSelfLink($link);
  foreach ($pager as $pager_link) {
    $feed->addLink($pager_link['rel'], $pager_link['href']);
  }
  $feed->addUpdated($updated);
  foreach ($entries as $info) {
    $entry = $feed->addEntry();
    $entry->addTitle($info['title']);
    $entry->addId($info['id']);
    $entry->addUrl($info['url']);
    $entry->addUpdated($info['updated']);
    foreach ($info['categories'] as $scheme => $term) {
      $entry->addCategory($term, $scheme);
    }
    $entry->addAuthors($info['authors']);
    $entry->addContent($info['body']);
  }
  return $feed->toxml();
}

/**
 * Composes syndicate atom entry.
 * 
 * @param int $nid
 *   Node id.
 * 
 * @return array
 *   Returns an array of entry's properties.
 */
function penton_syndicate_atom_entry($nid) {
  $entry = array();
  $node = node_load($nid);
  $node_url = check_url(url('node/' . $node->nid, array('absolute' => TRUE)));
  $field_datetime = field_get_items('node', $node, 'field_penton_published_datetime');
  if ($field_datetime) {
    $timestamp = penton_syndicate_atom_strtotime_tz($field_datetime[0]['value'], $field_datetime[0]['timezone']);
  }
  else {
    $timestamp = (int) $node->created;
  }
  $pubdate = gmstrftime('%Y-%m-%dT%H:%M:%SZ', $timestamp);
  if (isset($node->uuid)) {
    $entry['id'] = 'urn:uuid:' . $node->uuid;
  }
  else {
    $entry['id'] = $node_url;
  }
  $entry['url'] = $node_url;
  $entry['title'] = $node->title;
  $entry['updated'] = $pubdate;
  $body = field_get_items('node', $node, 'body');
  if ($body) {
    $entry['body'] = $body[0]['value'];
  }
  $entry['categories'] = array();
  $source = penton_syndicate_atom_source($node);
  if ($source !== NULL) {
    $entry['categories']['penton_source'] = $source;
  }
  $gating = penton_syndicate_atom_gating($node);
  if ($gating !== NULL) {
    $entry['categories']['penton_gating'] = $gating;
  }
  $syndication_ok = penton_syndicate_atom_syndication($node);
  if ($syndication_ok !== NULL) {
    $entry['categories']['penton_syndication_ok'] = $syndication_ok;
  }
  $entry['authors'] = penton_syndicate_atom_authors($node);
  return $entry;
}

/**
 * Gets a list of authors.
 * 
 * @param object $node
 *   The node object.
 * 
 * @return array
 *   Returns an array of authors.
 */
function penton_syndicate_atom_authors($node) {
  $authlist = array();
  $auths = field_get_items('node', $node, 'field_penton_author');
  if ($auths) {
    foreach ($auths as $auth) {
      if ($auth['target_id']) {
        $author = user_load($auth['target_id']);
        $authlist[] = $author->name;
      }
    }
  }
  return $authlist;
}

/**
 * Composes a list of the links.
 * 
 * @param array $args
 *   An array of pager arguments.
 * 
 * @param int $element
 *   Page number.
 * 
 * @return array
 *   Returns an array of the links.
 */
function penton_syndicate_atom_pager($args, $element = 0) {
  global $pager_page_array, $pager_total;
  $path = $args['path'];
  $limit = $args['limit'];
  $last = $pager_total[$element] - 1;
  $current = $pager_page_array[$element];
  $links = array(
    'first' => 0,
    'last' => $last,
  );
  // If we are anywhere but the first page.
  if ($pager_page_array[$element] > 0) {
    $links['previous'] = $current - 1;
  }
  // If we are anywhere but the last page.
  if ($current < $last) {
    $links['next'] = $current + 1;
  }
  $qs = array();
  if ($limit) {
    $qs['limit'] = $limit;
  }
  $link_elements = array();
  foreach ($links as $key => $page) {
    $qs['page'] = $page;
    $l = check_url(url($path, array('query' => $qs, 'absolute' => TRUE)));
    $link_elements[] = array('rel' => $key, 'href' => $l);
  }
  return $link_elements;
}

/**
 * Gets gating field value.
 * 
 * @param object $node
 *   The node object.
 * 
 * @return string|NULL
 *   Returns a string if the gating field exists, NULL otherwise.
 */
function penton_syndicate_atom_gating($node) {
  $field_penton_privacy_settings = field_get_items('node', $node, 'field_penton_privacy_settings');
  if ($field_penton_privacy_settings) {
    $role = $field_penton_privacy_settings[0]['value'];
    switch ($role) {
      case DRUPAL_ANONYMOUS_RID:
        $gating = 'public';
        break;

      case DRUPAL_AUTHENTICATED_RID:
        $gating = 'basic';
        break;

      case PENTON_GATED_ADVANCED_RID:
        $gating = 'advanced';
        break;

      case PENTON_GATED_PAID_PREMIUM_RID:
        $gating = 'paid';
        break;

      default:
        $gating = NULL;
    }
    return $gating;
  }
  return NULL;
}

/**
 * Gets source field value.
 * 
 * @param object $node
 *   The node object.
 * 
 * @return string|NULL
 *   Returns a string if the source field exists, NULL otherwise.
 */
function penton_syndicate_atom_source($node) {
  $field_penton_program = field_get_items('node', $node, 'field_penton_program');
  if ($field_penton_program) {
    $program_tid = $field_penton_program[0]['tid'];
    $query = db_select('taxonomy_term_data', 't');
    $query->condition('t.tid', $program_tid);
    $query->fields('t', array('name'));
    $result = $query->execute();
    $source = $result->fetchField();
    return $source;
  }
  else {
    return NULL;
  }
}

/**
 * Gets syndication field value.
 * 
 * @param object $node
 *   The node object.
 * 
 * @return string|NULL
 *   Returns a string if the syndicate field exists, NULL otherwise.
 */
function penton_syndicate_atom_syndication($node) {
  $field_penton_syndicate_atom = field_get_items('node', $node, 'field_penton_syndicate_atom');
  if ($field_penton_syndicate_atom) {
    return $field_penton_syndicate_atom[0]['value'];
  }
  else {
    return NULL;
  }
}

/**
 * Sets the default timezone and returns timestamp.
 * 
 * @param string $dtstr
 *   Datetime value.
 * 
 * @param string $tz
 *   Timezone value.
 * 
 * @return int
 *   Returns a timestamp.
 */
function penton_syndicate_atom_strtotime_tz($dtstr, $tz = NULL) {
  $tzsave = date_default_timezone_get();
  if ($tz) {
    date_default_timezone_set($tz);
  }
  $timestamp = strtotime($dtstr);
  date_default_timezone_set($tzsave);
  return $timestamp;
}
