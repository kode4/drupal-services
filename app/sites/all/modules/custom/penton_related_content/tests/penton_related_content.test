<?php

/**
 * @file
 * Provides tests for the Related Articles.
 */

/**
 * Class tests for the Related Articles.
 */
class PentonRelatedContentTestCase extends DrupalWebTestCase {

  /**
   * Return info about test case.
   *
   * @return array
   *   Test case info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Penton Related Content',
      'description' => 'Test creating list of Related Articles and Inline Related Articles.',
      'group' => 'Penton',
    );
  }

  /**
   * Tests SettingUp.
   */
  protected function setUp() {
    parent::setUp(
      array(
        'devel',
        'features',
        'date',
        'date_api',
        'role_field',
        'addressfield',
        'email',
        'link',
        'context',
        'penton_taxonomy',
        'views',
        'entityreference',
      )
    );

    $theme = 'penton_core_theme';
    variable_set('theme_default', $theme);
    drupal_flush_all_caches();

    $features = array(
      'penton_date_formats',
      'penton_field_bases',
      'penton_subtheme',
      'penton_dfp',
    );
    $success = module_enable($features);
    $this->assertTrue($success, 'Enabled features: ' . implode(', ', $features));
    features_rebuild();

    $features = array(
      'penton_article',
      'penton_categories',
      'penton_related_content',
    );
    $success = module_enable($features);
    $this->assertTrue($success, 'Enabled features: ' . implode(', ', $features));
    features_rebuild();

    $modules = array(
      'penton_related_content',
    );
    $success = module_enable($modules);

    $this->vocabulary = taxonomy_vocabulary_machine_name_load('categories');
    $this->term = $this->createTerm();
    $node_fields = array();
    $node_fields['field_penton_primary_category'][LANGUAGE_NONE][0]['tid'] = $this->term->tid;
    $node_fields['uid'] = 1;
    $node_fields['type'] = 'article';
    for ($i = 0; $i < 6; $i++) {
      $this->drupalCreateNode($node_fields);
    }

    $this->related = array();
    for ($i = 0; $i < 2; $i++) {
      $this->related[] = $this->drupalCreateNode($node_fields);
    }
    $this->inline_related = $this->drupalCreateNode($node_fields);

    $node_fields['field_penton_inline_related'][LANGUAGE_NONE][0]['target_id'] = $this->inline_related->nid;
    foreach ($this->related as $node) {
      $node_fields['field_penton_related_content'][LANGUAGE_NONE][]['target_id'] = $node->nid;
    }
    $this->node = $this->drupalCreateNode($node_fields);
  }

  /**
   * Returns a new term with random properties in vocabulary.
   */
  private function createTerm() {
    $term = new stdClass();
    $term->name = $this->randomName();
    $term->description = $this->randomName();
    $term->vid = $this->vocabulary->vid;
    $term->uid = 1;
    taxonomy_term_save($term);
    return $term;
  }

  /**
   * Test.
   */
  public function testGetRelatedArticles() {
    $inline = array_column(_penton_related_content_get_inline_related_nodes_field_items($this->node), 'target_id');

    $get_inline = in_array($this->inline_related->nid, $inline);
    $this->assertTrue($get_inline, 'Get Inline Related Articles.');

    $get_two_inline = (count($inline) == 2);
    $this->assertTrue($get_two_inline, 'Get two Inline Related Articles.');

    $related = array_map(function($e) {
      return is_object($e) ? $e->nid : $e['target_id'];
    }, _penton_related_content_get_related_nodes($this->node));

    $get_four_related = (count($related) == 4);
    $this->assertTrue($get_four_related, 'Get four Related Articles.');

    $inline_repeat = (count(array_unique(array_merge($inline, array($this->node->nid)))) == 3);
    $this->assertTrue($inline_repeat, 'Inline Related Articles not repeated.');

    $related_repeat = (count(array_unique(array_merge($related, array($this->node->nid)))) == 5);
    $this->assertTrue($related_repeat, 'Related Articles not repeated.');

    $related_and_inline_repeat = (count(array_diff($related, $inline)) == 4);
    $this->assertTrue($related_and_inline_repeat, 'Inline Related Articles not repeated in Related Articles.');
  }

}
