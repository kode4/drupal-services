<?php
/**
 * @file
 * Manages newsletters across site.
 */

/**
 * Implements hook_entity_info().
 */
function penton_newsletter_manager_entity_info() {
  return array(
    'penton_newsletter' => array(
      'label' => t('Penton Newsletter'),
      'plural label' => t('Penton Newsletters'),
      'controller class' => 'EntityAPIController',
      'base table' => 'penton_newsletter',
      'entity keys' => array(
        'id' => 'nlid',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function penton_newsletter_manager_permission() {
  return array(
    'administer newsletter manager' => array(
      'title' => 'Administer Newsletter Manager',
      'description' => 'Import and manage newsletters',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function penton_newsletter_manager_theme() {
  return array(
    'penton_newsletter_manager_subscribe_checkboxes' => array(
      'render element' => 'element',
    ),
    'penton_newsletter_manager_subscribe_checkbox' => array(
      'render element' => 'element',
    ),
    'penton_newsletter_manager_flagship_checkbox' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function penton_newsletter_manager_menu() {
  $items = array();

  $items['admin/config/services/penton_newsletter_manager'] = array(
    'title' => 'Penton Newsletter Manager',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('penton_newsletter_manager_settings'),
    'access arguments' => array('administer newsletter manager'),
    'file' => 'penton_newsletter_manager.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/penton_newsletter_manager/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/services/penton_newsletter_manager/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('penton_newsletter_manager_import_settings'),
    'access arguments' => array('administer newsletter manager'),
    'file' => 'penton_newsletter_manager.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['penton_newsletter_manager/newsletter_submit'] = array(
    'page callback' => 'penton_newsletter_manager_newsletters_subscribe_form_full_submit',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  return $items;
}

/**
 * Imports newsletter from eNewsPRO.
 */
function penton_newsletter_manager_import_newsletters() {
  $url = variable_get('penton_newsletter_manager_url', '');
  if (empty($url)) {
    drupal_set_message(t('URL to CSV file from eNewsPRO was not configured'), 'warning');
    return;
  }

  $data = file_get_contents($url);
  $rows = explode("\n", $data);
  // Unset row with field names.
  unset($rows[0]);

  $s = array();
  foreach ($rows as $row) {
    if (!empty($row)) {
      $s[] = str_getcsv($row);
    }
  }
  foreach ($s as $nl_data) {
    // Check if newsletter was imported previously.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'penton_newsletter')
      ->propertyCondition('title', $nl_data[0], '=');
    $result = $query->execute();
    if (isset($result['penton_newsletter'])) {
      $nl_entity = entity_load('penton_newsletter', array_keys($result['penton_newsletter']));
      $nl_entity = $nl_entity[array_keys($result['penton_newsletter'])[0]];
    }
    else {
      $nl_entity = entity_create('penton_newsletter', array());
    }
    $nl_entity->title = $nl_data[0];
    $nl_entity->active = $nl_data[1];
    $nl_entity->description = $nl_data[2];
    $nl_entity->mailing_frequency = !empty($nl_data[3]) ? $nl_data[3] : 'Varies';
    $nl_entity->thumbnail = $nl_data[4];
    $nl_entity->newsletter_code = $nl_data[5];
    $nl_entity->current_issue = $nl_data[8];
    $nl_entity->archives_url = $nl_data[10];
    $nl_entity->email_group_id = $nl_data[11];
    entity_save('penton_newsletter', $nl_entity);
  }
  if (!empty($s)) {
    drupal_set_message(t('Newsletters have been successfully imported.'));
  }
  else {
    drupal_set_message(t('Newsletters have not been imported. Please check an URL to CSV file at @url.',
        array(
          '@url' => l(t('Config page'), '/admin/config/services/penton_newsletter_manager/import'),
        )
      ),
      'warning');
  }
}

/**
 * Newsletters full form.
 *
 * @param array $form
 *   Form definition.
 * @param array $form_state
 *   Current state of the form.
 *
 * @return array
 *   Returns the prepared form.
 *
 * @see ctools_wizard_wrapper()
 */
function penton_newsletter_manager_newsletters_subscribe_form_full($form, &$form_state) {
  if (user_is_logged_in()) {
    $form['#attributes']['class'][] = 'penton_modal_reload_after_close';
  }
  elseif ($form_state['single_list'] == TRUE) {
    $form['#attributes']['class'][] = 'penton_modal_submit_on_close';
  }

  $form['form_title'] = array(
    '#markup' => '<h1>' . variable_get('penton_modal_nws_form_header', 'Thanks for subscribing.') . '<p>' . t('You may also be interested in our other newsletters.') . '</p></h1>',
    '#weight' => -100,
  );

  $options = penton_newsletter_manager_subscribe_form_options();
  $form['subscribe'] = array(
    '#type' => 'checkboxes',
    '#theme' => 'penton_newsletter_manager_subscribe_checkboxes',
    '#options' => $options,
  );

  $form['actions']['subscribe'] = array(
    '#type' => 'submit',
    '#weight' => 3,
    '#attributes' => array(
      'class' => array('modal-register-btn'),
    ),
    '#value' => t('Subscribe'),
  );

  // Unset status messages.
  drupal_get_messages(NULL, TRUE);
  return $form;
}

/**
 * Newsletters form submit.
 *
 * @param array $form
 *   Form definition.
 * @param array $form_state
 *   Current state of the form.
 */
function penton_newsletter_manager_newsletters_subscribe_form_full_submit($form, &$form_state) {
  if (!isset($form_state['object'])) {
    $form_state['object'] = new stdClass();
  }
  $form_state['object']->subscribe = $form_state['values']['subscribe'];

  $newsletters = array_filter($form_state['values']['subscribe']);
  penton_newsletter_manager_process_subscription(
    $newsletters,
    !empty($_COOKIE['Drupal_visitor_subemail']) ? $_COOKIE['Drupal_visitor_subemail'] : NULL
  );
}

/**
 * Promoted site newsletter.
 *
 * @return array
 *   Returns the prepared checkbox field array.
 */
function penton_newsletter_manager_flagship_newsletter_form_element() {
  $promoted_title = penton_newsletter_manager_get_promoted_newsletter_title();
  if (!empty($promoted_title)) {
    return array(
      '#type' => 'checkbox',
      '#default_value' => TRUE,
      '#title' => t('<div class="newsletter-flagship-info"><p>Sign me up for the !title newsletter.</p></div>',
        array(
          '!title' => $promoted_title,
        )
      ),
      '#title_display' => 'none',
      '#theme' => 'penton_newsletter_manager_flagship_checkbox',
    );
  }
  return array();
}

/**
 * Options for newsletter subscribe list.
 *
 * @return array
 *   Returns array of $options.
 */
function penton_newsletter_manager_subscribe_form_options() {
  $enabled = variable_get('penton_newsletter_manager_enabled');
  $promoted = variable_get('penton_newsletter_manager_promoted');
  $entity_type = 'penton_newsletter';

  if (!empty($promoted) && in_array($promoted, $enabled)) {
    $enabled = array_diff($enabled, array($promoted));
  }
  $options = array();
  foreach ($enabled as $value) {
    $wrapper = entity_metadata_wrapper($entity_type, $value);
    $options[$wrapper->nlid->raw()] = penton_newsletter_manager_subscribe_form_options_wrapper($wrapper);
  }

  return $options;
}

/**
 * Returns options wrappers.
 *
 * @param object $wrapper
 *   Wrapper for penton_newsletter entity.
 *
 * @return string
 *   Returns wrapped $options.
 */
function penton_newsletter_manager_subscribe_form_options_wrapper(&$wrapper) {
  $options = '<div class="newsletter-info"><h3>' . $wrapper->title->raw() . '</h3>';
  $options .= '<p>' . $wrapper->description->value() . '</p></div>';
  $options .= '<div class="newsletter-add-info"><p>' . $wrapper->mailing_frequency->value() . '</p>';
  $options .= l(t('View Sample'), $wrapper->current_issue->value(), array('attributes' => array('target' => '_blank'))) . '</div>';
  return $options;
}

/**
 * Returns title of the promoted newsletter.
 *
 * @return string
 *   Title of the promoted newsletter.
 */
function penton_newsletter_manager_get_promoted_newsletter_title() {
  $promoted = variable_get('penton_newsletter_manager_promoted', 0);
  $newsletter = entity_load('penton_newsletter', array($promoted));
  if (!empty($newsletter)) {
    return $newsletter[$promoted]->title;
  }
  return '';
}

/**
 * Returns true if there are any enabled newsletters not choosen as promoted.
 */
function penton_newsletter_manager_have_not_promoted_newsletters() {
  $promoted = variable_get('penton_newsletter_manager_promoted', 0);
  $enabled = variable_get('penton_newsletter_manager_enabled', array());

  $enabled_without_promoted = array_filter($enabled, function ($val) use ($promoted) {
    return !empty($val) && $val != $promoted;
  });
  return !empty($enabled_without_promoted);
}

/**
 * Custom theme function for newsletter subscribe checkboxes group.
 */
function theme_penton_newsletter_manager_subscribe_checkboxes(&$variables) {
  $element = &$variables['element'];
  $output = '';
  foreach ($element['#options'] as $key => $val) {
    // Use our custom checkbox theme function.
    $output .= theme('penton_newsletter_manager_subscribe_checkbox', $element[$key], $key);
  }
  return $output;
}

/**
 * Custom theme function for newsletter subscribe single checkbox.
 */
function theme_penton_newsletter_manager_subscribe_checkbox(&$variables) {
  return _penton_newsletter_manager_get_newsletter_checkbox_html($variables);
}

/**
 * Custom theme function for flagship newsletter single checkbox.
 */
function theme_penton_newsletter_manager_flagship_checkbox(&$variables) {
  return _penton_newsletter_manager_get_newsletter_checkbox_html($variables, TRUE);
}

/**
 * Helper function to theme newsletter checkbox.
 */
function _penton_newsletter_manager_get_newsletter_checkbox_html(&$variables, $flagship = FALSE) {
  $element = &$variables['element'];
  _form_set_class($element, array('form-checkbox'));

  $output = '<div class="newsletter-' . ($flagship ? 'flagship-' : '') . 'single">';
  $output .= '<div class="newsletter-check"><p>';
  $output .= '<input type="checkbox" ';
  $output .= 'name="' . $element['#name'] . '" ';
  $output .= 'id="' . $element['#id'] . '" ';
  $output .= 'value="' . $element['#return_value'] . '" ';
  $output .= $element['#value'] ? ' checked="checked" ' : ' ';
  $output .= drupal_attributes($element['#attributes']) . ' />';
  $output .= '<label for="' . $element['#id'] . '"></label>';
  $output .= '</p></div>';
  if (!is_null($element['#title'])) {
    $output .= $element['#title'];
  }
  $output .= '</div>';

  return $output;
}

/**
 * Subscribes user.
 *
 * @param array $newsletters
 *   Array of form state values.
 *
 * @param string $mail
 *   User's email address.
 *
 * @return bool
 *   Returns true if subscription is successful.
 */
function penton_newsletter_manager_process_subscription($newsletters, $mail = NULL) {
  $eloqua_api_enabled = variable_get('penton_eloqua_api_enabled', '0');
  $eloqua_form_id = variable_get('penton_eloqua_api_reg_form_id', '0');
  if ($eloqua_api_enabled != '0' && $eloqua_form_id != '0') {
    include_once drupal_get_path('module', 'penton_eloqua_api') . '/includes/penton_eloqua_api.helper.inc';
    if (is_null($mail)) {
      global $user;
      if (!$user->uid) {
        return FALSE;
      }
      $mail = $user->mail;
    }

    $newsletters = entity_load('penton_newsletter', $newsletters);
    $eloqua_email_group_ids = array();
    foreach ($newsletters as $newsletter) {
      if (empty($newsletter->email_group_id)) {
        $error_message = 'No email group specified for newsletter with id ' . $newsletter->nlid;
        watchdog('Eloqua newsletter manager', $error_message);
        return FALSE;
      }
      $eloqua_email_group_ids[] = $newsletter->email_group_id;
    }
    foreach ($eloqua_email_group_ids as $eloqua_email_group_id) {
      try {
        penton_eloqua_api_subscribe_user($eloqua_email_group_id, $mail);
      }
      catch (Exception $e) {
        $error_message = 'Error occurred while trying to subscribe user with email ' . $mail;
        watchdog('Eloqua newsletter manager', $error_message);
        return FALSE;
      }
    }
    return TRUE;
  }
  return FALSE;
}
